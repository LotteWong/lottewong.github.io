<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LotteWong</title>
  
  <subtitle>在代码符号表象中避难。</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-10-22T15:14:14.105Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LotteWong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>#DevOps# 部署服务的N种姿势</title>
    <link href="http://yoursite.com/2021/10/22/%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
    <id>http://yoursite.com/2021/10/22/%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E7%9A%84N%E7%A7%8D%E5%A7%BF%E5%8A%BF/</id>
    <published>2021-10-21T23:00:21.000Z</published>
    <updated>2021-10-22T15:14:14.105Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录工作中服务常见的部署方式，旨在于 cover 日常的 <code>CI/CD</code> 场景：</p><ol><li><strong>进程+单机</strong>：<code>systemctl</code> + <code>rpm</code></li><li><strong>容器+单机</strong>：<code>docker-compose</code> + <code>image</code></li><li><strong>容器+集群</strong>：<code>k8s</code> + <code>image</code></li></ol><hr><a id="more"></a><h1 id="systemctl-rpm"><a href="#systemctl-rpm" class="headerlink" title="systemctl + rpm"></a><strong>systemctl + rpm</strong></h1><blockquote><p><code>systemctl</code>：自行注册/启动/更新/停止</p><p><code>rpm</code>：流水线生成 rpm，自行安装/更新</p></blockquote><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/wework-service.service</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=wework-service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStart=/usr/bin/wework-service --config=/etc/wework-service/config.yaml</span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">WorkingDirectory=/usr/share/wework-service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><ol><li><p><strong>保证 <code>WorkingDirectory</code> 必须存在</strong>，否则抛出错误，解决方法如下：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Failed at step CHDIR spawning /xxx: No such file or directory</span><br><span class="line">mkdir -p /usr/share/wework-service</span><br></pre></td></tr></table></figure></li><li><p><strong>保证 <code>ExecStart</code> 可以执行</strong>，交叉编译二进制可执行文件，设置权限为可执行，具体命令：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 交叉编译</span><br><span class="line">set CGO_ENBALED=0</span><br><span class="line">set GOOS=linux</span><br><span class="line">set GOARCH=amd64</span><br><span class="line">go build -o cmd/server/wework-service cmd/server/main.go</span><br><span class="line"></span><br><span class="line"># 设置权限</span><br><span class="line">chmod 755 /usr/bin/wework-service</span><br></pre></td></tr></table></figure></li></ol><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Step 1: 初次交叉编译</span><br><span class="line"># Step 2: 上传二进制可执行文件（若配置文件也更新，同步上传配置文件）</span><br><span class="line"># Step 3: 初次设置权限</span><br><span class="line">rpm -ivh wework-service-0.0.0-dev.1.xxxxxxx.rpm # 安装 rpm 包</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload # 重新加载配置文件</span><br><span class="line">sudo systemctl enable wework-service.service # 录入服务</span><br><span class="line">sudo systemctl start wework-service.service # 启动服务</span><br><span class="line">sudo systemctl status wework-service.service # 查看服务</span><br><span class="line">journalctl -u wework-service.service # 查看服务运行日志</span><br></pre></td></tr></table></figure><h2 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Step 1: 重新交叉编译</span><br><span class="line"># Step 2: 上传二进制可执行文件（若配置文件也更新，同步上传配置文件）</span><br><span class="line"># Step 3: 重新设置权限</span><br><span class="line">rpm -Uvh wework-service-0.0.0-dev.1.xxxxxxx.rpm # 更新 rpm 包</span><br><span class="line"></span><br><span class="line">sudo systemctl restart wework-service.service # 重启服务</span><br><span class="line">sudo systemctl status wework-service.service # 查看服务</span><br><span class="line">journalctl -u wework-service.service # 查看服务运行日志</span><br></pre></td></tr></table></figure><h2 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h2><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop wework-service.service # 停止服务</span><br><span class="line">sudo systemctl status wework-service.service # 查看服务</span><br><span class="line">journalctl -u wework-service.service # 查看服务运行日志</span><br></pre></td></tr></table></figure><h1 id="docker-compose-image"><a href="#docker-compose-image" class="headerlink" title="docker-compose + image"></a><strong>docker-compose + image</strong></h1><blockquote><p><code>docker-compose</code>：提供编排配置文件</p><p><code>image</code>：流水线生成 image，直接从公司仓库拉或者下载上传镜像</p></blockquote><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose yaml"></a>docker-compose yaml</h2><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># /data/wework-service/base.yaml</span></span><br><span class="line"><span class="hljs-attr">version:</span> <span class="hljs-string">"2.1"</span></span><br><span class="line"><span class="hljs-attr">services:</span></span><br><span class="line">  <span class="hljs-comment"># 中间件</span></span><br><span class="line">  <span class="hljs-attr">mongo-standalone:</span></span><br><span class="line">    <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;mongo-standalone-image&#125;</span></span><br><span class="line">    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span></span><br><span class="line">    <span class="hljs-attr">healthcheck:</span></span><br><span class="line">      <span class="hljs-attr">test:</span> <span class="hljs-string">[]</span></span><br><span class="line">      <span class="hljs-attr">interval:</span> <span class="hljs-string">10s</span></span><br><span class="line">      <span class="hljs-attr">start_period:</span> <span class="hljs-string">15s</span></span><br><span class="line">    <span class="hljs-attr">environment:</span></span><br><span class="line">      <span class="hljs-attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="hljs-string">username</span></span><br><span class="line">      <span class="hljs-attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="hljs-string">password</span></span><br><span class="line">      <span class="hljs-attr">MONGO_INITDB_DATABASE:</span> <span class="hljs-string">database</span></span><br><span class="line">    <span class="hljs-attr">volumes:</span> <span class="hljs-comment"># 挂载 volume</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/xxx/install/init_script/mongo:/docker-entrypoint-initdb.d</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/xxx/mount_points/mongodb:/data/db</span></span><br><span class="line">    <span class="hljs-attr">ports:</span>   <span class="hljs-comment"># 映射 port</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-number">27017</span><span class="hljs-string">:27017</span></span><br><span class="line">    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span></span><br><span class="line">    <span class="hljs-attr">command:</span> <span class="hljs-string">--replSet</span> <span class="hljs-string">rs0</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment"># 微服务</span></span><br><span class="line">  <span class="hljs-attr">wework-service:</span></span><br><span class="line">    <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;wework-service-image&#125;</span></span><br><span class="line">    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span></span><br><span class="line">    <span class="hljs-attr">volumes:</span> <span class="hljs-comment"># 挂载 volume</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/xxx/conf/wework-service/config.yaml:/etc/wework-service/config.yaml</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">/data/xxx/logs/wework-service:/var/log/wework-service</span></span><br><span class="line">    <span class="hljs-attr">ports:</span> <span class="hljs-comment"># 映射 port</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">xxxx:xxxx</span></span><br><span class="line">    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment"># 启动顺序</span></span><br><span class="line">  <span class="hljs-attr">step-0:</span></span><br><span class="line">    <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;wait-for-dependencies-image&#125;</span></span><br><span class="line">    <span class="hljs-attr">environment:</span></span><br><span class="line">      <span class="hljs-attr">TIMEOUT_LENGTH:</span> <span class="hljs-number">60</span></span><br><span class="line">    <span class="hljs-attr">depends_on:</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">mongo-standalone</span></span><br><span class="line">    <span class="hljs-attr">command:</span> <span class="hljs-string">mongo-standalone:27017</span></span><br><span class="line">  </span><br><span class="line">  <span class="hljs-attr">step-1:</span></span><br><span class="line">    <span class="hljs-attr">image:</span> <span class="hljs-string">$&#123;wait-for-dependencies-image&#125;</span></span><br><span class="line">    <span class="hljs-attr">environment:</span></span><br><span class="line">      <span class="hljs-attr">TIMEOUT_LENGTH:</span> <span class="hljs-number">30</span></span><br><span class="line">    <span class="hljs-attr">depends_on:</span></span><br><span class="line">      <span class="hljs-bullet">-</span> <span class="hljs-string">wework-service</span></span><br><span class="line">    <span class="hljs-attr">command:</span> <span class="hljs-string">wework-service:xxxx</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">networks:</span></span><br><span class="line">  <span class="hljs-attr">default:</span></span><br><span class="line">    <span class="hljs-attr">driver:</span> <span class="hljs-string">bridge</span></span><br><span class="line">    <span class="hljs-attr">ipam:</span></span><br><span class="line">      <span class="hljs-attr">config:</span></span><br><span class="line">        <span class="hljs-bullet">-</span> <span class="hljs-attr">subnet:</span> <span class="hljs-string">$&#123;subnet_segment&#125;</span></span><br></pre></td></tr></table></figure><h2 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&#123;node_ip&#125;:&#123;port&#125; 或 http://&#123;domain&#125;:&#123;port&#125;</span><br></pre></td></tr></table></figure><h2 id="更新服务-1"><a href="#更新服务-1" class="headerlink" title="更新服务"></a>更新服务</h2><h3 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 修改配置文件（修改挂载路径的不是容器内部的）</span></span><br><span class="line">vim /data/xxx/conf/wework-service/config.yaml</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 执行更新脚本</span></span><br><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 读取参数</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">    container_name=<span class="hljs-variable">$1</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"usage: ./restart.sh container-name\n e.g.  ./restart.sh wework-service"</span></span><br><span class="line">    <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启容器</span></span><br><span class="line">container_id=$(docker ps -a | grep <span class="hljs-string">"<span class="hljs-variable">$&#123;container_name&#125;</span>"</span> | awk <span class="hljs-string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$container_id</span>"</span> == <span class="hljs-string">""</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"container not found!"</span></span><br><span class="line">   <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">"restarting <span class="hljs-variable">$&#123;container_name&#125;</span>... "</span></span><br><span class="line">docker restart <span class="hljs-string">"<span class="hljs-variable">$&#123;container_id&#125;</span>"</span> &gt; restart.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 健康检查</span></span><br><span class="line">PID=$!</span><br><span class="line">marks=( <span class="hljs-string">'/'</span> <span class="hljs-string">'-'</span> <span class="hljs-string">'\'</span> <span class="hljs-string">'|'</span> )</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> s=$(ps -p <span class="hljs-variable">$PID</span> -o s=) &amp;&amp; [[ <span class="hljs-string">"<span class="hljs-variable">$s</span>"</span> &amp;&amp; <span class="hljs-string">"<span class="hljs-variable">$s</span>"</span> != <span class="hljs-string">'Z'</span> ]]; <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">"\b<span class="hljs-variable">$&#123;marks[i++ % $&#123;#marks[@]&#125;</span>]&#125;"</span>;</span><br><span class="line">    sleep 0.5</span><br><span class="line"><span class="hljs-keyword">done</span></span><br><span class="line"></span><br><span class="line">output=$(cat restart.log)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$output</span>"</span> == <span class="hljs-string">"<span class="hljs-variable">$container_id</span>"</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\b\e[32mDone.\033[0m"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\b\e[31mFailed!\033[0m"</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$output</span>"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 镜像获取</span></span><br><span class="line"><span class="hljs-comment"># 1. 先从本地仓库查找（如果不能ping通公司的仓库，需要下载→保存→上传→加载流程）</span></span><br><span class="line"><span class="hljs-comment"># 2. 再从远程仓库下载（如果可以ping通公司的仓库，可以直接让脚本跑）</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 执行更新脚本</span></span><br><span class="line"><span class="hljs-meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 读取参数</span></span><br><span class="line">docker_service_name=<span class="hljs-variable">$1</span></span><br><span class="line">service_tag=<span class="hljs-variable">$2</span></span><br><span class="line"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$#</span> -lt 2 ]];<span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">"please input two param for docker_service_name and service_tag. eg: wework-service 0.0.0-dev.1.xxxxxxx"</span></span><br><span class="line">    <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line">IFS=<span class="hljs-string">" "</span> <span class="hljs-built_in">read</span> -r -a values &lt;&lt;&lt; <span class="hljs-string">"<span class="hljs-variable">$&#123;docker_service_name//\// &#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 停止服务</span></span><br><span class="line">service_name=<span class="hljs-variable">$&#123;values[$[$&#123;#values[@]&#125;</span>-1]]&#125;</span><br><span class="line">workspace=<span class="hljs-string">"/data/wework-service"</span></span><br><span class="line"><span class="hljs-built_in">cd</span> <span class="hljs-string">"<span class="hljs-variable">$&#123;workspace&#125;</span>"</span></span><br><span class="line">docker-compose -f base.yml stop <span class="hljs-string">"<span class="hljs-variable">$&#123;service_name&#125;</span>"</span></span><br><span class="line"><span class="hljs-built_in">echo</span> y | docker-compose -f base.yml rm <span class="hljs-string">"<span class="hljs-variable">$&#123;service_name&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 启动服务</span></span><br><span class="line">sed -i <span class="hljs-string">"s/image: <span class="hljs-variable">$&#123;docker_service_name//\//\\/&#125;</span>.*$/image: <span class="hljs-variable">$&#123;docker_service_name//\//\\/&#125;</span>:<span class="hljs-variable">$&#123;service_tag&#125;</span>/"</span> base.yml</span><br><span class="line">docker-compose -f base.yml up -d <span class="hljs-string">"<span class="hljs-variable">$&#123;service_name&#125;</span>"</span></span><br></pre></td></tr></table></figure><h1 id="k8s-image"><a href="#k8s-image" class="headerlink" title="k8s + image"></a><strong>k8s + image</strong></h1><blockquote><p><code>k8s</code>：提供编排配置文件</p><p><code>image</code>：流水线生成 image，直接从公司仓库拉或者下载上传镜像</p></blockquote><p><img src="https://pic3.zhimg.com/80/v2-1344ef25cfeff6ef831cd5e99890d242_1440w.jpg" alt="Kubernetes Domain Concept Relationship"></p><h2 id="Kubernetes-Deployment"><a href="#Kubernetes-Deployment" class="headerlink" title="Kubernetes Deployment"></a>Kubernetes Deployment</h2><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">Pod Template:</span></span><br><span class="line">  <span class="hljs-attr">Labels:</span>  <span class="hljs-string">app=wework-service</span></span><br><span class="line">  <span class="hljs-attr">Containers:</span></span><br><span class="line">   <span class="hljs-attr">wework-service:</span></span><br><span class="line">    <span class="hljs-attr">Image:</span>      <span class="hljs-string">$&#123;wework-service-image&#125;</span></span><br><span class="line">    <span class="hljs-attr">Port:</span>       <span class="hljs-string">xxxx/TCP</span></span><br><span class="line">    <span class="hljs-attr">Host Port:</span>  <span class="hljs-number">0</span><span class="hljs-string">/TCP</span></span><br><span class="line">    <span class="hljs-attr">Limits:</span></span><br><span class="line">      <span class="hljs-attr">cpu:</span>     <span class="hljs-string">600m</span></span><br><span class="line">      <span class="hljs-attr">memory:</span>  <span class="hljs-string">1Gi</span></span><br><span class="line">    <span class="hljs-attr">Requests:</span></span><br><span class="line">      <span class="hljs-attr">cpu:</span>        <span class="hljs-string">64m</span></span><br><span class="line">      <span class="hljs-attr">memory:</span>     <span class="hljs-string">64Mi</span></span><br><span class="line">    <span class="hljs-attr">Environment:</span>  <span class="hljs-string">&lt;none&gt;</span></span><br><span class="line">    <span class="hljs-attr">Mounts:</span></span><br><span class="line">      <span class="hljs-string">/data/xxx/conf/wework-service</span> <span class="hljs-string">from</span> <span class="hljs-string">app-config</span> <span class="hljs-string">(rw)</span></span><br><span class="line">      <span class="hljs-string">/etc/localtime</span> <span class="hljs-string">from</span> <span class="hljs-string">host-time</span> <span class="hljs-string">(rw)</span></span><br><span class="line">  <span class="hljs-attr">Volumes:</span></span><br><span class="line">   <span class="hljs-attr">host-time:</span></span><br><span class="line">    <span class="hljs-attr">Type:</span>          <span class="hljs-string">HostPath</span> <span class="hljs-string">(bare</span> <span class="hljs-string">host</span> <span class="hljs-string">directory</span> <span class="hljs-string">volume)</span></span><br><span class="line">    <span class="hljs-attr">Path:</span>          <span class="hljs-string">/etc/localtime</span></span><br><span class="line">    <span class="hljs-attr">HostPathType:</span>  </span><br><span class="line">   <span class="hljs-attr">app-config:</span></span><br><span class="line">    <span class="hljs-attr">Type:</span>      <span class="hljs-string">ConfigMap</span> <span class="hljs-string">(a</span> <span class="hljs-string">volume</span> <span class="hljs-string">populated</span> <span class="hljs-string">by</span> <span class="hljs-string">a</span> <span class="hljs-string">ConfigMap)</span></span><br><span class="line">    <span class="hljs-attr">Name:</span>      <span class="hljs-string">wework-service-config</span></span><br><span class="line">    <span class="hljs-attr">Optional:</span>  <span class="hljs-literal">false</span></span><br></pre></td></tr></table></figure><h2 id="Kubernetes-Service"><a href="#Kubernetes-Service" class="headerlink" title="Kubernetes Service"></a>Kubernetes Service</h2><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">Name:</span>              <span class="hljs-string">wework-service</span></span><br><span class="line"><span class="hljs-attr">Namespace:</span>         <span class="hljs-string">default</span></span><br><span class="line"><span class="hljs-attr">Labels:</span>            <span class="hljs-string">app=wework-service</span></span><br><span class="line"><span class="hljs-attr">Selector:</span>          <span class="hljs-string">app=wework-service</span></span><br><span class="line"><span class="hljs-attr">Type:</span>              <span class="hljs-string">ClusterIP</span></span><br><span class="line"><span class="hljs-attr">IP:</span>                <span class="hljs-string">x.x.x.x</span> <span class="hljs-comment"># Cluster Ip</span></span><br><span class="line"><span class="hljs-attr">Port:</span>              <span class="hljs-string">http</span> <span class="hljs-string">xxxx/TCP</span></span><br><span class="line"><span class="hljs-attr">TargetPort:</span>        <span class="hljs-string">xxxx/TCP</span></span><br><span class="line"><span class="hljs-attr">Endpoints:</span>         <span class="hljs-string">x.x.x.x:xxxx</span> <span class="hljs-comment"># Pod Ip</span></span><br><span class="line"><span class="hljs-attr">Session Affinity:</span>  <span class="hljs-string">None</span></span><br><span class="line"><span class="hljs-attr">Events:</span>            <span class="hljs-string">&lt;none&gt;</span></span><br></pre></td></tr></table></figure><h2 id="访问服务-1"><a href="#访问服务-1" class="headerlink" title="访问服务"></a>访问服务</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&#123;ingress_ip&#125;:&#123;port&#125; 或 http://&#123;domain&#125;:&#123;port&#125;</span><br></pre></td></tr></table></figure><h2 id="更新服务-2"><a href="#更新服务-2" class="headerlink" title="更新服务"></a>更新服务</h2><h3 id="更新配置-1"><a href="#更新配置-1" class="headerlink" title="更新配置"></a>更新配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 修改配置文件（修改挂载路径的不是容器内部的）</span></span><br><span class="line">kubectl edit configmap wework-service</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 执行更新脚本</span></span><br><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 读取参数</span></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">    pod_name=<span class="hljs-variable">$1</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"usage: ./restart.sh pod-name\n e.g.  ./restart.sh wework-service"</span></span><br><span class="line">    <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启容器</span></span><br><span class="line">pod_id=$(kubectl get pods | grep <span class="hljs-string">"<span class="hljs-variable">$&#123;pod_name&#125;</span>"</span> | awk <span class="hljs-string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$pod_id</span>"</span> == <span class="hljs-string">""</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">   <span class="hljs-built_in">echo</span> <span class="hljs-string">"pod not found!"</span></span><br><span class="line">   <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-built_in">echo</span> -n <span class="hljs-string">"restarting <span class="hljs-variable">$&#123;pod_name&#125;</span>... "</span></span><br><span class="line">kubectl delete pod <span class="hljs-string">"<span class="hljs-variable">$&#123;pod_id&#125;</span>"</span> &gt; restart.log &amp;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 健康检查</span></span><br><span class="line">PID=$!</span><br><span class="line">marks=( <span class="hljs-string">'/'</span> <span class="hljs-string">'-'</span> <span class="hljs-string">'\'</span> <span class="hljs-string">'|'</span> )</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">while</span> s=$(ps -p <span class="hljs-variable">$PID</span> -o s=) &amp;&amp; [[ <span class="hljs-string">"<span class="hljs-variable">$s</span>"</span> &amp;&amp; <span class="hljs-string">"<span class="hljs-variable">$s</span>"</span> != <span class="hljs-string">'Z'</span> ]]; <span class="hljs-keyword">do</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -ne <span class="hljs-string">"\b<span class="hljs-variable">$&#123;marks[i++ % $&#123;#marks[@]&#125;</span>]&#125;"</span>;</span><br><span class="line">    sleep 0.5</span><br><span class="line"><span class="hljs-keyword">done</span></span><br><span class="line"></span><br><span class="line">output=$(cat restart.log)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> [ <span class="hljs-string">"<span class="hljs-variable">$output</span>"</span> == <span class="hljs-string">"<span class="hljs-variable">$pod_id</span>"</span> ]</span><br><span class="line"><span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\b\e[32mDone.\033[0m"</span></span><br><span class="line"><span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\b\e[31mFailed!\033[0m"</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$output</span>"</span></span><br><span class="line"><span class="hljs-keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="更新镜像-1"><a href="#更新镜像-1" class="headerlink" title="更新镜像"></a>更新镜像</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 镜像获取</span></span><br><span class="line"><span class="hljs-comment"># 1. 先从本地仓库查找（如果不能ping通公司的仓库，需要下载→保存→上传→加载流程）</span></span><br><span class="line"><span class="hljs-comment"># 2. 再从远程仓库下载（如果可以ping通公司的仓库，可以直接让脚本跑）</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 登录中转机器</span></span><br><span class="line">docker pull pub/wework-service:0.0.0-dev.1.xxxxxxx</span><br><span class="line">docker tag pub/wework-service:0.0.0-dev.1.xxxxxxx pri/wework-service:0.0.0-dev.1.xxxxxxx</span><br><span class="line">docker push pri/wework-service:0.0.0-dev.1.xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 登录联调机器</span></span><br><span class="line">kubectl <span class="hljs-built_in">set</span> image deploy/wework-service wework-service=pri/wework-service:0.0.0-dev.1.xxxxxxx</span><br></pre></td></tr></table></figure><h1 id="堡垒机和隧道机"><a href="#堡垒机和隧道机" class="headerlink" title="堡垒机和隧道机"></a>堡垒机和隧道机</h1><h2 id="访问服务-2"><a href="#访问服务-2" class="headerlink" title="访问服务"></a>访问服务</h2><blockquote><p><strong>所谓隧道代理，就是一个能够自动更换代理地址的代理服务（local → remote）。</strong>该隧道机对 local 和 remote 均网络互通，但是 local 和 remote 之间网络不通。</p></blockquote><ol><li>登录隧道机</li><li>配置转发规则</li><li>选不分配终端</li><li>配置 hosts 文件：<code>127.0.0.1 web.test.wework.com</code></li><li>打开隧道机</li><li>访问 web 服务：<a href="http://web.test.wework.com" target="_blank" rel="noopener">http://web.test.wework.com</a></li></ol><h2 id="更新服务-3"><a href="#更新服务-3" class="headerlink" title="更新服务"></a>更新服务</h2><blockquote><p><strong>跳板机属于内控堡垒机范畴，是一种用于单点登陆的主机应用系统。</strong>开发机直连公司的内网，跳板机直连实验室内网。</p></blockquote><ol><li><p>登录开发机</p></li><li><p>下载镜像并保存镜像</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">docker_service_name=<span class="hljs-variable">$1</span></span><br><span class="line">service_tag=<span class="hljs-variable">$2</span></span><br><span class="line"><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$#</span> -lt 2 ]];<span class="hljs-keyword">then</span></span><br><span class="line">    <span class="hljs-built_in">echo</span> <span class="hljs-string">"please input two param for docker_service_name and service_tag. eg: wework-service 0.0.0-dev.1.xxxxxxx"</span></span><br><span class="line">    <span class="hljs-built_in">exit</span> 1</span><br><span class="line"><span class="hljs-keyword">fi</span></span><br><span class="line">docker pull <span class="hljs-variable">$1</span>:<span class="hljs-variable">$2</span></span><br><span class="line">IFS=<span class="hljs-string">" "</span> <span class="hljs-built_in">read</span> -r -a values &lt;&lt;&lt; <span class="hljs-string">"<span class="hljs-variable">$&#123;docker_service_name//\// &#125;</span>"</span></span><br><span class="line">service_name=<span class="hljs-variable">$&#123;values[$[$&#123;#values[@]&#125;</span>-1]]&#125;</span><br><span class="line">docker save -o <span class="hljs-variable">$&#123;service_name&#125;</span>_<span class="hljs-variable">$&#123;service_tag//./-&#125;</span>.tar <span class="hljs-variable">$1</span>:<span class="hljs-variable">$2</span></span><br></pre></td></tr></table></figure></li><li><p><code>sz ${wework-service-image}.tar</code> 到本地</p></li><li><p>登录跳板机</p></li><li><p>从本地 <code>rz</code></p></li><li><p>上传镜像并加载镜像</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i <span class="hljs-variable">$&#123;wework-service-image&#125;</span>.tar</span><br></pre></td></tr></table></figure></li><li><p>执行更新服务脚本</p></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要记录工作中服务常见的部署方式，旨在于 cover 日常的 &lt;code&gt;CI/CD&lt;/code&gt; 场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;进程+单机&lt;/strong&gt;：&lt;code&gt;systemctl&lt;/code&gt; + &lt;code&gt;rpm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器+单机&lt;/strong&gt;：&lt;code&gt;docker-compose&lt;/code&gt; + &lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器+集群&lt;/strong&gt;：&lt;code&gt;k8s&lt;/code&gt; + &lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="DevOps" scheme="http://yoursite.com/categories/DevOps/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
    <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>#Arch# 企微客服号后台开发小结</title>
    <link href="http://yoursite.com/2021/08/28/%E4%BC%81%E5%BE%AE%E5%AE%A2%E6%9C%8D%E5%8F%B7%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2021/08/28/%E4%BC%81%E5%BE%AE%E5%AE%A2%E6%9C%8D%E5%8F%B7%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/</id>
    <published>2021-08-27T23:00:21.000Z</published>
    <updated>2021-10-22T14:57:46.128Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍一种<strong>通用的企微客服号后台设计与实现</strong>的方案（仍在改进ing…</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><blockquote><p>企业微信开放了<u>机器人</u>和<u>客服号</u>两种方式对会话进行自定义的功能扩展，本文将介绍一种<strong>通用的企微客服号后台设计与实现</strong>的方案（仍在改进ing… 需要注意的是如何注册申请以及相关接口规范不在本次的讨论范围中。最终 <code>wework-service</code> 应该具备<strong>两种通用能力</strong>：</p><ol><li>对于<u>企微用户</u>而言：响应多种模式指令，执行指定业务逻辑。</li><li>对于<u>其它服务</u>而言：提供原生or聚合的调用企微接口操作。</li></ol></blockquote><hr><h1 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a><strong>整体设计</strong></h1><h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h2><p><img src="/images/arch.png" alt="分层设计架构图"></p><ul><li><code>wework-service</code> <u>内部实现</u>采用的是<strong>洋葱模型</strong>，通过 <code>gin</code> 框架的中间件灵活集成各类插件，包括：消息解析中间件（<code>decrypt XML</code>）、崩溃恢复中间件（<code>panic recover</code>）、日志记录中间件（<code>log request</code>）、流量控制中间件（<code>rate limit</code>）、权限认证中间件（<code>rbac auth</code>）和消息处理控制器（<code>handle controller</code>）。</li><li><code>wework-service</code> <u>外部依赖</u>主要有<strong>微服务和数据库</strong>。其它微服务绑定响应的逻辑，数据库主要用于存储流量控制和权限认证的相关配置，缓存主要避免企微对令牌的获取限流。</li></ul><h2 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a>调用关系</h2><h3 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h3><p><img src="/images/seq_user.png" alt="用户交互时序图"></p><ul><li><strong>Step 1</strong>：企微用户与客服号进行<u>单聊or群聊</u>会话，发送<u>文本or混编</u>消息，包含了<u>指令本身和业务数据</u>。</li><li><strong>Step 2-3</strong>：加密消息从客服号回调到 <code>wework-service</code>，此时为了避免重试应该及时<u>返回空包</u>。</li><li><strong>Step 4-6</strong>：进行<u>消息解析、流量控制、权限认证和消息处理</u>。</li><li><strong>Step 7-9</strong>：消息流转到具体的处理策略当中，通过驱动与<u> <code>other-service</code> 和企微后台</u>进行交互。</li><li><strong>Step 10-11</strong>：<u>企微后台</u>直接通过<u>客服号</u>将结果发送给<u>企微用户</u>。</li></ul><h3 id="服务交互"><a href="#服务交互" class="headerlink" title="服务交互"></a>服务交互</h3><p><img src="/images/seq_service.png" alt="服务交互时序图"></p><ul><li><strong>Step 1</strong>：<code>other-serivce</code> 先自行进行业务的处理</li><li><strong>Step 2-3</strong>：<code>other-serivce</code> 请求 <code>wework-serivce</code> 操作企微后台</li><li><strong>Step 4-5</strong>：<u>企微后台</u>直接通过<u>客服号</u>将结果发送给<u>企微用户</u>。</li></ul><h1 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a><strong>组件设计</strong></h1><h2 id="消息解析中间件"><a href="#消息解析中间件" class="headerlink" title="消息解析中间件"></a>消息解析中间件</h2><blockquote><p><strong>加解密工具库</strong>：<a href="https://github.com/sbzhu/weworkapi_golang" target="_blank" rel="noopener">https://github.com/sbzhu/weworkapi_golang</a></p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ParseCallbackMessage verify, decrypt and unmarshal wework callback request</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseCallbackMessage</span><span class="hljs-params">(query *model.WeworkCallbackQueryModel, body []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-params">(*model.WeworkXMLRecvMsg, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// verify and decrypt</span></span><br><span class="line">weworkSvcToken := app.GetConfig().WeworkSvcToken</span><br><span class="line">weworkSvcEncodingAESKey := app.GetConfig().WeworkSvcEncodingAESKey</span><br><span class="line">crypt := wxbizmsgcrypt.NewWXBizMsgCrypt(weworkSvcToken, weworkSvcEncodingAESKey, <span class="hljs-string">""</span>, wxbizmsgcrypt.XmlType)</span><br><span class="line">bts, cryptErr := crypt.DecryptMsg(query.MsgSignature, query.Timestamp, query.Nonce, body)</span><br><span class="line"><span class="hljs-keyword">if</span> cryptErr != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="hljs-string">"verify and decrypt wework callback request failed: %s"</span>, cryptErr.ErrMsg)</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// unmarshal xml data</span></span><br><span class="line">recv := &amp;model.WeworkXMLRecv&#123;&#125;</span><br><span class="line">unmarshalErr := xml.Unmarshal(bts, recv)</span><br><span class="line"><span class="hljs-keyword">if</span> unmarshalErr != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">err = fmt.Errorf(<span class="hljs-string">"unmarshal xml data of wework callback request failed: %s"</span>, unmarshalErr.Error())</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logrus.Debugf(<span class="hljs-string">"WeworkXMLRecvMsg: %+v"</span>, recv.Msg) <span class="hljs-comment">// better log in middleware</span></span><br><span class="line"><span class="hljs-keyword">return</span> &amp;recv.Msg, <span class="hljs-literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// MessageParserMiddleware middleware to parse callback message</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">MessageParserMiddleware</span><span class="hljs-params">()</span> <span class="hljs-title">gin</span>.<span class="hljs-title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="hljs-keyword">var</span> query model.WeworkCallbackQueryModel</span><br><span class="line"><span class="hljs-keyword">if</span> err := ctx.ShouldBindQuery(&amp;query); err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">logrus.Errorf(err.Error())</span><br><span class="line">ctx.JSON(http.StatusOK, <span class="hljs-literal">nil</span>)</span><br><span class="line">ctx.Abort()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">body, err := ioutil.ReadAll(ctx.Request.Body)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">logrus.Errorf(err.Error())</span><br><span class="line">ctx.JSON(http.StatusOK, <span class="hljs-literal">nil</span>)</span><br><span class="line">ctx.Abort()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg, err := ParseCallbackMessage(&amp;query, body)</span><br><span class="line"><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">logrus.Errorf(err.Error())</span><br><span class="line">ctx.JSON(http.StatusOK, <span class="hljs-literal">nil</span>)</span><br><span class="line">ctx.Abort()</span><br><span class="line"><span class="hljs-keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.Set(<span class="hljs-string">"msg"</span>, msg)</span><br><span class="line">ctx.Next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="权限认证中间件"><a href="#权限认证中间件" class="headerlink" title="权限认证中间件"></a>权限认证中间件</h2><ul><li><em>to be continue…</em></li></ul><h2 id="流量控制中间件"><a href="#流量控制中间件" class="headerlink" title="流量控制中间件"></a>流量控制中间件</h2><ul><li><em>to be continue…</em></li></ul><h2 id="消息回调控制器"><a href="#消息回调控制器" class="headerlink" title="消息回调控制器"></a>消息回调控制器</h2><p><img src="/images/class.png" alt="工厂模式与策略模式"></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p><code>CallStrategyFactory</code> 主要解决多种<strong>匹配模式和消息格式</strong>问题，以支持通过<strong>单聊or群聊和文本or混编</strong>的方式响应。<code>getTriggerAndDataFromText</code> 和 <code>getTriggerFromMixedMessage/getMediaIdAndPicUrlFromMixedMessage</code> 解决<strong>匹配模式</strong>问题，<code>TextStrategyFactory</code> 和 <code>MixedMessageFactory</code> 类解决<strong>消息格式</strong>问题。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// CallbackStrategyFactory</span></span><br><span class="line"><span class="hljs-keyword">type</span> CallbackStrategyFactory <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">ProduceStrategy(*trigger.Config, *model.WeworkXMLRecvMsg) strategy.CallbackStrategy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>所有策略必须实现 <code>CallbackStrategy.Handle(CallbackContext)</code>，换言之<strong>定义策略实现</strong>了这个接口就可<strong>在工厂中注册</strong>，投入实际使用，这样非常灵活。这里辨析一点：<strong><code>Handle</code> 传入参数 <code>ctx</code></strong> 指的是完整的消息（包含发送<strong>主体和内容</strong>），而 <strong><code>Strategy</code> 固有数据成员</strong>则往往仅代表业务数据（可以是紧跟在指令后的<strong>文本或图片</strong>）。</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// CallbackStrategy</span></span><br><span class="line"><span class="hljs-keyword">type</span> CallbackStrategy <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">Handle(ctx *context.CallbackContext)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h1><h2 id="缓存令牌"><a href="#缓存令牌" class="headerlink" title="缓存令牌"></a>缓存令牌</h2><blockquote><p>由于企微后台对获取令牌的接口做了限流保护，如果每次经 <code>wework-service</code> 的流量都要调用一次接口获取令牌，当流量过大时会影响到 <code>wework-service</code> 的正常工作，考虑到令牌有过期时间，实际上也没必要每次都直接请求。我们可以多加一层缓存，<strong>避免被限流了同时提高响应速度</strong>。</p></blockquote><p><img src="/images/cache_token.png" alt="缓存令牌流程图"></p><h2 id="避免重试"><a href="#避免重试" class="headerlink" title="避免重试"></a>避免重试</h2><blockquote><p>由于企微的客服号在回调后若未及时收到空包，将会在短时间内做持续重试。这种情况必须考虑，否则<strong>消息将会重复消费以及增加后台处理负荷</strong>。</p></blockquote><ol><li><strong>方法一</strong>：<u>接收和处理的逻辑分离</u>，亦即同步接收异步处理。这里需要注意的点：错误处理不能再以直接返回的方式做，需要写进日志，必要时还可以消息通知用户。这是一种<u>积极</u>避免重试的手段（防患于未然）。</li><li><strong>方法二</strong>：<u>消息 <code>id</code> 去重</u>，使用缓存记录一定周期内的所有消息编号，并且设置过期时间，对重复的消息直接忽略不做处理。这是一种<u>悲观</u>避免重试的手段（来之则安之）。</li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://km" target="_blank" rel="noopener">企业微信内部服务号CI助手开发总结</a></li><li><a href="https://km" target="_blank" rel="noopener">企业微信客服服务号开发小记</a></li><li><a href="https://km" target="_blank" rel="noopener">企业微信内部客服号开发小结</a></li><li><a href="https://km" target="_blank" rel="noopener">从零开始搭建你的企业微信客服服务号</a></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文将介绍一种&lt;strong&gt;通用的企微客服号后台设计与实现&lt;/strong&gt;的方案（仍在改进ing…&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Arch" scheme="http://yoursite.com/categories/Arch/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>#Unit Test# Unit Test Pre-study and Practice in Golang</title>
    <link href="http://yoursite.com/2021/08/16/Unit%20Test%20Pre-study%20and%20Practice%20in%20Golang/"/>
    <id>http://yoursite.com/2021/08/16/Unit%20Test%20Pre-study%20and%20Practice%20in%20Golang/</id>
    <published>2021-08-15T23:00:21.000Z</published>
    <updated>2021-08-16T15:20:06.038Z</updated>
    
    <content type="html"><![CDATA[<p>If you write code, write tests. <em>– The Way of Testivus</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><blockquote><p>单元测试的重要性无需多言，但是由于业务迭代得超快，就很难再分出时间和精力投入到质量保障中去。<strong>尽管如此，等待接口联调的过程中既漫长无比又压力山大（毕竟谁想被挂 Tapd Bug 单呢 <em>_(:з」∠)_</em></strong></p><p>在之前的 <a href="https://lottewong.github.io/2020/11/19/Unit%20Test%20Pre-study%20and%20Practice%20in%20Python/" target="_blank" rel="noopener">Unit Test Pre-study and Practice in Python</a> 文章中，已经简要地介绍了测试流程和测试用例的核心理念，本文将沿用这些方法论以及结合各位大神的博客和日常工作的体验，着重讨论以下内容：</p><ul><li><strong>技术选型</strong>：<code>Golang</code> 作为一门静态和强类型语言，相比于 <code>Python</code> 的动态和弱类型特性，带来了一些新的挑战。</li><li><strong>工程实践</strong>：业务逻辑快速验证的最佳实践，暂时不涉及脚手架设计。</li></ul></blockquote><hr><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a><strong>技术选型</strong></h2><h3 id="单测框架"><a href="#单测框架" class="headerlink" title="单测框架"></a>单测框架</h3><h4 id="testing"><a href="#testing" class="headerlink" title="testing"></a>testing</h4><blockquote><p>官方原生库，无断言机制，编写较繁琐。</p></blockquote><ol><li><p><strong>编写</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DoSomething</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDoSomething</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// Arrange</span></span><br><span class="line">   <span class="hljs-comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// Act</span></span><br><span class="line">    err := DoSomething()</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">// Assert</span></span><br><span class="line">    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;</span><br><span class="line">        t.Errorf(err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>运行</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="hljs-built_in">test</span> -v</span><br></pre></td></tr></table></figure></li></ol><h4 id="GoConvey"><a href="#GoConvey" class="headerlink" title="GoConvey"></a>GoConvey</h4><blockquote><p>兼容官方原生库和模拟框架，有断言机制，编写较简洁。</p></blockquote><ol><li><p><strong>编写</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DoSomething</span><span class="hljs-params">()</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDoSomething</span><span class="hljs-params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    Convey(<span class="hljs-string">"TestDoSomething"</span>, t, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">        Convey(<span class="hljs-string">"Condition 1"</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;</span><br><span class="line">            <span class="hljs-comment">// Arrange</span></span><br><span class="line">            <span class="hljs-comment">// ...</span></span><br><span class="line">            </span><br><span class="line">            <span class="hljs-comment">// Act</span></span><br><span class="line">            err := DoSomething()</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-comment">// Assert</span></span><br><span class="line">            So(err, ShouldBeNil)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>运行</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># Cmd</span></span><br><span class="line">go <span class="hljs-built_in">test</span> -v</span><br><span class="line"><span class="hljs-comment"># Web</span></span><br><span class="line"><span class="hljs-variable">$GOPATH</span>/bin/goconvey</span><br></pre></td></tr></table></figure></li></ol><h3 id="模拟框架"><a href="#模拟框架" class="headerlink" title="模拟框架"></a>模拟框架</h3><h4 id="GoMonkey"><a href="#GoMonkey" class="headerlink" title="GoMonkey"></a>GoMonkey</h4><blockquote><p>Mock 全局变量 &amp; 函数方法</p></blockquote><ol><li><p><strong>全局变量</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">patches := ApplyFuncVar(&amp;funcVar, mockVar)</span><br><span class="line"><span class="hljs-keyword">defer</span> patches.Reset()</span><br><span class="line"></span><br><span class="line">patches := ApplyGlobalVar(&amp;funcVar, mockVar)</span><br><span class="line"><span class="hljs-keyword">defer</span> patches.Reset()</span><br></pre></td></tr></table></figure></li><li><p><strong>函数方法</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">patches := ApplyFunc(funcName, mockFunc)</span><br><span class="line"><span class="hljs-keyword">defer</span> patches.Reset()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> ptr *SomeClass</span><br><span class="line">patches := ApplyMethod(reflect.TypeOf(ptr), <span class="hljs-string">"methodName"</span>, mockMethod)</span><br><span class="line"><span class="hljs-keyword">defer</span> patches.Reset()</span><br></pre></td></tr></table></figure></li></ol><h4 id="GoMock"><a href="#GoMock" class="headerlink" title="GoMock"></a>GoMock</h4><blockquote><p>Mock 接口</p></blockquote><ol><li><p><strong>生成</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// repository.go</span></span><br><span class="line"><span class="hljs-comment">// Repository is the interface to be mocked</span></span><br><span class="line"><span class="hljs-keyword">type</span> Repository <span class="hljs-keyword">interface</span> &#123;</span><br><span class="line">    Create(val <span class="hljs-keyword">interface</span>&#123;&#125;) error</span><br><span class="line">    Get(key <span class="hljs-keyword">string</span>) (<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span><br><span class="line">    Update(key <span class="hljs-keyword">string</span>, val <span class="hljs-keyword">interface</span>&#123;&#125;) error</span><br><span class="line">    Delete(key <span class="hljs-keyword">string</span>) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// mockgen -source=$&#123;file&#125;</span></span><br><span class="line"><span class="hljs-comment">// mockgen $&#123;package&#125; $&#123;interface1&#125;, ... , $&#123;interfaceN&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// mock_repository.go</span></span><br><span class="line"><span class="hljs-comment">// MockRepository is a mock of Repository interface</span></span><br><span class="line"><span class="hljs-keyword">type</span> MockRepository <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    ctrl     *gomock.Controller</span><br><span class="line">    recorder *MockRepositoryMockRecorder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// MockRepositoryMockRecorder is the mock recorder for MockRepository</span></span><br><span class="line"><span class="hljs-keyword">type</span> MockRepositoryMockRecorder <span class="hljs-keyword">struct</span> &#123;</span><br><span class="line">    mock *MockRepository</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// NewMockRepository creates a new mock instance</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewMockRepository</span><span class="hljs-params">(ctrl *gomock.Controller)</span> *<span class="hljs-title">MockRepository</span></span> &#123;</span><br><span class="line">    mock := &amp;MockRepository&#123;ctrl: ctrl&#125;</span><br><span class="line">    mock.recorder = &amp;MockRepositoryMockRecorder&#123;mock&#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> mock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// EXPECT returns an object that allows the caller to indicate expected use</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(_m *MockRepository)</span> <span class="hljs-title">EXPECT</span><span class="hljs-params">()</span> *<span class="hljs-title">MockRepositoryMockRecorder</span></span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> _m.recorder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Create mocks base method</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(_m *MockRepository)</span> <span class="hljs-title">Create</span><span class="hljs-params">(_param0 []<span class="hljs-keyword">byte</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Get mocks base method</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(_m *MockRepository)</span> <span class="hljs-title">Get</span><span class="hljs-params">(_param0 <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Update mocks base method</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(_m *MockRepository)</span> <span class="hljs-title">Update</span><span class="hljs-params">(_param0 <span class="hljs-keyword">string</span>, _param1 <span class="hljs-keyword">interface</span>&#123;&#125;)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Delete mocks base method</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(_m *MockRepository)</span> <span class="hljs-title">Delete</span><span class="hljs-params">(_param0 <span class="hljs-keyword">string</span>)</span> <span class="hljs-title">error</span></span> &#123;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用</strong></p><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="hljs-keyword">defer</span> ctrl.Finish()</span><br><span class="line">mockRepo := mock_repo.NewMockRepository(ctrl)</span><br><span class="line"></span><br><span class="line">InOrder (</span><br><span class="line">createCall := mockRepo.EXPECT().Create(mockVal).Return(mockErr)</span><br><span class="line">    getCall := mockRepo.EXPECT().Get(mockKey).Return(mockVal, mockErr).Times(<span class="hljs-number">7</span>)</span><br><span class="line">updateCall := mockRepo.EXPECT().Update(mockKey, mockVal).Return(mockErr)</span><br><span class="line">deleteCall := mockRepo.EXPECT().Create(mockKey).Return(mockErr)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h4 id="sqlmock"><a href="#sqlmock" class="headerlink" title="sqlmock"></a>sqlmock</h4><blockquote><p>Mock 数据库</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Arrange</span></span><br><span class="line">db, mock, err := sqlmock.New()</span><br><span class="line"><span class="hljs-keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">rows := sqlmock.NewRows(colKeys).AddRow(colVals)</span><br><span class="line">mock.ExpectQuery(sqlStatement).WillReturnRows(rows)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Act</span></span><br><span class="line">res, err := db.Query(sqlStatement)</span><br><span class="line"><span class="hljs-keyword">defer</span> res.Close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Assert</span></span><br><span class="line"><span class="hljs-keyword">for</span> res.Next() &#123;</span><br><span class="line">    res.Scan(&amp;fileds)</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="httptest"><a href="#httptest" class="headerlink" title="httptest"></a>httptest</h4><blockquote><p>Mock 服务器</p></blockquote><figure class="highlight go hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Arrange</span></span><br><span class="line">r := httptest.NewRequest(method, url, <span class="hljs-literal">nil</span>)</span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Act</span></span><br><span class="line">handler(w, r)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Assert</span></span><br><span class="line">res := w.Result()</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="工程实践"><a href="#工程实践" class="headerlink" title="工程实践"></a><strong>工程实践</strong></h2><ul><li><em>to be continued…</em></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><p><strong>单测框架</strong>用于<strong>断言</strong>：使用 <code>GoConvey</code> 框架。</p></li><li><p><strong>模拟框架</strong>用于<strong>替换</strong>：对于全局变量和函数方法使用 <code>GoMonkey</code> 框架，对于接口使用 <code>GoMock</code> 框架，对于数据库使用 <code>sqlmock</code> 框架，对于服务器使用 <code>httptest</code> 框架。</p></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h2><blockquote><p>以下文章对本文亦有贡献 :)</p></blockquote><ul><li><a href="http://no_permission_for_oa_article" target="_blank" rel="noopener">单元测试成神之路——Golang篇</a></li><li><a href="http://no_permission_for_oa_article" target="_blank" rel="noopener">Golang单元测试调研和实践</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><blockquote><p>使用文档和最佳实践 :)</p></blockquote><ul><li><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/chapter09/09.1.html" target="_blank" rel="noopener">testing的更多用法</a></li><li><a href="https://www.jianshu.com/p/e3b2b1194830" target="_blank" rel="noopener">GoConvey的更多用法</a></li><li><a href="https://blog.csdn.net/u013276277/article/details/104993370" target="_blank" rel="noopener">GoMonkey的更多用法</a></li><li><a href="https://www.jianshu.com/p/f4e773a1b11f" target="_blank" rel="noopener">GoMock的更多用法</a></li><li><a href="https://studygolang.com/articles/27670" target="_blank" rel="noopener">sqlmock的更多用法</a></li><li><a href="https://tkstorm.com/posts-list/programming/go/refs/go-httptest/" target="_blank" rel="noopener">httptest的更多用法</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;If you write code, write tests. &lt;em&gt;– The Way of Testivus&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="QA" scheme="http://yoursite.com/categories/QA/"/>
    
    
    <category term="GoConvey" scheme="http://yoursite.com/tags/GoConvey/"/>
    
    <category term="GoMonkey" scheme="http://yoursite.com/tags/GoMonkey/"/>
    
    <category term="GoMock" scheme="http://yoursite.com/tags/GoMock/"/>
    
  </entry>
  
  <entry>
    <title>#Others# GoLand + DevCloud 的远程开发与调试</title>
    <link href="http://yoursite.com/2021/08/12/GoLand%20+%20DevCloud%20%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2021/08/12/GoLand%20+%20DevCloud%20%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B8%8E%E8%B0%83%E8%AF%95/</id>
    <published>2021-08-11T23:21:00.000Z</published>
    <updated>2021-08-12T16:02:49.916Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>GoLand</code> as <code>IDE</code></li><li><code>DevCloud</code> as <code>go run/go build/dlv debug</code> environment</li></ul><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><blockquote><p>缘起一个 <code>EOF</code> 错误，由于网络策略原因，本地开发机无法连接某个内网服务，遂转向在办公网内的远程服务器。<del>本人作为 Linux 小菜</del>，由此产生了一个新诉求：<strong>在 Windows 上远程开发和调试服务器的代码，充分地发挥 IDE 的强大作用。</strong> </p></blockquote><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h1><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><ol><li>GoLand 2020.2.3</li></ol><h2 id="远程环境"><a href="#远程环境" class="headerlink" title="远程环境"></a>远程环境</h2><ol><li>Go 1.16.6</li><li>Delve 1.7.0</li></ol><h1 id="配置-GoLand-连接-DevCloud"><a href="#配置-GoLand-连接-DevCloud" class="headerlink" title="配置 GoLand 连接 DevCloud"></a><strong>配置 GoLand 连接 DevCloud</strong></h1><h2 id="创建-Deployment-配置"><a href="#创建-Deployment-配置" class="headerlink" title="创建 Deployment 配置"></a>创建 Deployment 配置</h2><blockquote><p><code>Tools</code> -&gt; <code>Deployment</code> -&gt; <code>Configuration</code> -&gt; <code>+</code></p></blockquote><p><img src="/images/create_deployment_configuration.png" alt="创建 Deployment 配置"></p><h3 id="Connection-网络连接"><a href="#Connection-网络连接" class="headerlink" title="Connection - 网络连接"></a>Connection - 网络连接</h3><blockquote><ul><li><code>Type</code>：选择 <code>SFTP</code> 协议</li><li><code>SSH configuration</code>：填写 <code>Host</code> / <code>Port</code> / <code>User name</code> / <code>Password</code> 信息，通过 <code>Test Connection</code> 验证</li><li><code>Root path</code>：点击 <code>Autodetect</code> 按钮</li><li><code>Web server URL</code>：暂时不用考虑</li></ul></blockquote><p><img src="/images/config_connection_option.png" alt="配置 Connection 选项"></p><h3 id="Mappings-存储映射"><a href="#Mappings-存储映射" class="headerlink" title="Mappings - 存储映射"></a>Mappings - 存储映射</h3><blockquote><ul><li><p><code>Local path</code>：本地开发机项目目录</p></li><li><p><code>Deployment path</code>：远程服务器项目目录</p></li><li><p><code>Web path</code>：暂时不用考虑</p></li></ul></blockquote><p><img src="/images/config_mappings_option.png" alt="配置 Mappings 选项"></p><h2 id="创建-Run-Debug-配置"><a href="#创建-Run-Debug-配置" class="headerlink" title="创建 Run/Debug 配置"></a>创建 Run/Debug 配置</h2><blockquote><p><code>Run</code> -&gt; <code>Edit Configurations</code> -&gt; <code>+</code> -&gt; <code>Go Remote</code></p></blockquote><p><img src="/images/create_run_and_debug_configuration.png" alt="创建 Run/Debug 配置"></p><blockquote><ul><li><p><code>Host</code>：远程服务器地址</p></li><li><p><code>Port</code>：Delve Port</p></li></ul></blockquote><p><img src="/images/config_go_remote_option.png" alt="配置 Go Remote 选项"></p><h1 id="登录、查看和同步"><a href="#登录、查看和同步" class="headerlink" title="登录、查看和同步"></a><strong>登录、查看和同步</strong></h1><h2 id="登录远程服务器"><a href="#登录远程服务器" class="headerlink" title="登录远程服务器"></a>登录远程服务器</h2><blockquote><p><code>Tool</code> -&gt; <code>Start SSH Session</code></p></blockquote><p><img src="/images/start_ssh_session.png" alt="创建 SSH 会话"></p><h2 id="查看远程目录树"><a href="#查看远程目录树" class="headerlink" title="查看远程目录树"></a>查看远程目录树</h2><blockquote><p><code>Tools</code> -&gt; <code>Deployment</code> -&gt; <code>Browse Remote Host</code></p></blockquote><p><img src="/images/browse_remote_host.png" alt="查看 Remote Host 目录"></p><h2 id="同步本地文件夹"><a href="#同步本地文件夹" class="headerlink" title="同步本地文件夹"></a>同步本地文件夹</h2><blockquote><p><strong>手动</strong>：<code>Tools</code> -&gt; <code>Deployment</code> -&gt; <code>Sync with Deployed to DevCloud</code></p><p><strong>自动</strong>：<code>Tools</code> -&gt; <code>Deployment</code> -&gt; <code>Automatic Upload (on explicit save)</code></p></blockquote><p><img src="/images/sync_to_or_automatic_upload.png" alt="手动 or 自动 Sync"></p><h1 id="部署与调试"><a href="#部署与调试" class="headerlink" title="部署与调试"></a><strong>部署与调试</strong></h1><h2 id="远程执行部署脚本"><a href="#远程执行部署脚本" class="headerlink" title="远程执行部署脚本"></a>远程执行部署脚本</h2><h3 id="编译调试一起"><a href="#编译调试一起" class="headerlink" title="编译调试一起"></a>编译调试一起</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dlv debug cmd/server/main.go --headless --listen=:2345 --api-version=2</span><br></pre></td></tr></table></figure><h3 id="先编译再调试"><a href="#先编译再调试" class="headerlink" title="先编译再调试"></a>先编译再调试</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build -o cmd/server/demo.exe cmd/server/main.go</span><br><span class="line">dlv --listen=:2345 --headless=<span class="hljs-literal">true</span> --api-version=2 <span class="hljs-built_in">exec</span> cmd/server/demo.exe</span><br></pre></td></tr></table></figure><h3 id="进程后台操作"><a href="#进程后台操作" class="headerlink" title="进程后台操作"></a>进程后台操作</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup dlv debug cmd/server/main.go --headless --listen=:2345 --api-version=2 &gt;&gt; ./demo.log 2&gt;&amp;1 &amp; <span class="hljs-comment"># 后台启动</span></span><br><span class="line">pkill -9 dlv <span class="hljs-comment"># 后台暂停</span></span><br></pre></td></tr></table></figure><h3 id="完整脚本文件"><a href="#完整脚本文件" class="headerlink" title="完整脚本文件"></a>完整脚本文件</h3><ul><li><p><strong>start.sh</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># set go env</span></span><br><span class="line"><span class="hljs-built_in">export</span> GO111MODULE=auto</span><br><span class="line"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io,direct</span><br><span class="line">go mod tidy</span><br><span class="line">go mod vendor</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># kill processes already started</span></span><br><span class="line">pkill -9 dlv</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># run demo backgroud server</span></span><br><span class="line">nohup dlv debug cmd/server/main.go --headless --listen=:2345 --api-version=2 &gt;&gt; ./demo.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">'nohup dlv debug cmd/server/main.go --headless --listen=:2345 --api-version=2 &gt;&gt; ./demo.log 2&gt;&amp;1 &amp;'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>stop.sh</strong></p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># kill processes already started</span></span><br><span class="line">pkill -9 dlv</span><br></pre></td></tr></table></figure></li></ul><h2 id="本地打开调试模式"><a href="#本地打开调试模式" class="headerlink" title="本地打开调试模式"></a>本地打开调试模式</h2><p><img src="/images/debug_on_devcloud.png" alt="DEBUG on DevCloud"></p><blockquote><p><em>PS：这里需要注意，<code>go run</code> 的时候返回数据到 <code>Postman</code>，<code>dlv debug</code> 的时候返回数据到 <code>GoLand</code></em></p></blockquote><h1 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a><strong>具体流程</strong></h1><ol><li>配置好 <code>Deployment</code> 和 <code>Run/Debug</code></li><li>修改本地代码文件，手动或自动同步内容到远程</li><li>登录远程服务器，一键执行部署脚本</li><li>本地打好断点，开启调试模式</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h1><h2 id="GoLand-Debug"><a href="#GoLand-Debug" class="headerlink" title="GoLand Debug"></a>GoLand Debug</h2><ol><li><strong>开启调试模式</strong>：<code>Shift + F9</code></li><li><strong>打下断点</strong>：点击 Code 左侧</li><li><strong>查看变量</strong>：查看 Debug 面板</li><li><strong><code>Step Over</code></strong>：<code>F8</code></li><li><strong><code>Step Into</code></strong>：<code>F7</code></li><li><strong><code>Step Out</code></strong>：<code>Shift + F8</code></li><li><strong>下一个断点处</strong>：<code>F9</code></li></ol><h2 id="Delve-Debug"><a href="#Delve-Debug" class="headerlink" title="Delve Debug"></a>Delve Debug</h2><ol><li><strong>开启调试模式</strong>：<code>dlv debug main.go</code></li><li><strong>打下断点</strong>：<code>break pkg.fn</code> 或 <code>break file:line</code></li><li><strong>查看变量</strong>：<code>print var</code> 或 <code>args</code> 或 <code>locals</code></li><li><strong><code>Step Over</code></strong>：<code>next</code></li><li><strong><code>Step Into</code></strong>：<code>step</code></li><li><strong><code>Step Out</code></strong>：<code>stepout</code></li><li><strong>下一个断点处</strong>：<code>continue</code></li></ol><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a><strong>参考文献</strong></h1><ol><li><a href="https://mojotv.cn/go/golang-remote_debug" target="_blank" rel="noopener">Go进阶36:Goland远程开发调试</a></li><li><a href="https://blog.csdn.net/liuYinXinAll/article/details/103016871" target="_blank" rel="noopener">解决在goland中通过dlv远程调试go程序后服务端无法退出</a></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GoLand&lt;/code&gt; as &lt;code&gt;IDE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DevCloud&lt;/code&gt; as &lt;code&gt;go run/go build/dlv debug&lt;/code&gt; environment&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>#Others# 和新项目相爱相杀</title>
    <link href="http://yoursite.com/2021/07/24/%E5%92%8C%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9B%B8%E7%88%B1%E7%9B%B8%E6%9D%80/"/>
    <id>http://yoursite.com/2021/07/24/%E5%92%8C%E6%96%B0%E9%A1%B9%E7%9B%AE%E7%9B%B8%E7%88%B1%E7%9B%B8%E6%9D%80/</id>
    <published>2021-07-23T23:21:00.000Z</published>
    <updated>2021-08-16T15:12:41.987Z</updated>
    
    <content type="html"><![CDATA[<p>夸张的修辞手法.jpg（（（ Happy 7*24 Day 🤟</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><blockquote><p>来你🐧正式打工不知不觉已经十天了，比起实习的时候工作内容已经大有不同，再见已是<strong>工具人小黄bot</strong>（此工具人非彼工具人thx。</p><p>今天主要记录一下理解和熟悉新项目的过程，希望在未来接触新业务也会有所帮助。</p></blockquote><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a><strong>前置条件</strong></h1><blockquote><p>本人司职 <code>Golang</code> 后台开发，下面内容仅供参考。</p></blockquote><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><ol><li><code>Golang</code>：业务开发的主要语言</li><li><code>Shell</code>：工具运维的主要语言</li></ol><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><code>Git</code>、<code>Linux</code></li><li>云原生、高并发、分布式、微服务</li><li>算法分析、数据结构</li><li>计算机网络、操作系统、数据库概论</li><li>设计模式、软件架构</li><li>敏捷开发、项目管理</li></ol><h2 id="开发框架"><a href="#开发框架" class="headerlink" title="开发框架"></a>开发框架</h2><ol><li><code>gin</code>：基于 API</li><li><code>go-micro</code>：基于微服务</li></ol><h2 id="数据库操作及驱动"><a href="#数据库操作及驱动" class="headerlink" title="数据库操作及驱动"></a>数据库操作及驱动</h2><ol><li><code>MySQL</code>：关系型数据库</li><li><code>MongoDB</code>：文档型数据库</li><li><code>Redis</code>：键值型数据库</li></ol><h2 id="其它的中间件"><a href="#其它的中间件" class="headerlink" title="其它的中间件"></a>其它的中间件</h2><ol><li>消息队列</li><li>注册中心</li></ol><h2 id="相关系统"><a href="#相关系统" class="headerlink" title="相关系统"></a>相关系统</h2><ol><li><code>upstream</code>：对接内部产品</li><li><code>downstream</code>：前端项目</li></ol><h2 id="迭代流程"><a href="#迭代流程" class="headerlink" title="迭代流程"></a>迭代流程</h2><ol><li><code>Unit Test</code>、<code>Mock Test</code></li><li><code>Coding Standard</code></li><li><code>CI / CD</code></li></ol><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a><strong>需求分析</strong></h1><blockquote><p>需求分析阶段主要是从需求层面来了解项目，<strong>知道项目在做什么</strong>。</p></blockquote><h2 id="可用资产"><a href="#可用资产" class="headerlink" title="可用资产"></a>可用资产</h2><ol><li>产品手册</li><li>产品原型</li><li>需求文档</li></ol><h2 id="阶段目标"><a href="#阶段目标" class="headerlink" title="阶段目标"></a>阶段目标</h2><ol><li>理解和区分关键的<strong>领域概念</strong></li><li>明确产品的<strong>主要功能和主要流程</strong></li></ol><h1 id="方案设计"><a href="#方案设计" class="headerlink" title="方案设计"></a><strong>方案设计</strong></h1><blockquote><p>方案设计阶段主要是从方案层面来解构项目，<strong>思考项目该怎么做</strong>。</p></blockquote><h2 id="可用资产-1"><a href="#可用资产-1" class="headerlink" title="可用资产"></a>可用资产</h2><ol><li>技术文档</li><li>接口文档</li><li>数据库表</li></ol><h2 id="阶段目标-1"><a href="#阶段目标-1" class="headerlink" title="阶段目标"></a>阶段目标</h2><ol><li>整理项目的<strong>整体设计</strong>（项目本身），包括功能、架构和流程</li><li>整理项目的<strong>局部设计</strong>（对应特定场景的具体解决方案），包括功能、架构和流程</li><li>了解<strong>接口文档（<code>dto</code>）</strong>如何与业务相结合起来</li><li>了解<strong>数据库表（<code>po</code>）</strong>如何与业务相结合起来</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h1><blockquote><p>代码实现阶段主要是从代码层面来落实项目，<strong>有依据地搞好细节</strong>。</p></blockquote><h2 id="可用资产-2"><a href="#可用资产-2" class="headerlink" title="可用资产"></a>可用资产</h2><ol><li>项目代码</li></ol><h2 id="阶段目标-2"><a href="#阶段目标-2" class="headerlink" title="阶段目标"></a>阶段目标</h2><ol><li><strong>梳理项目代码层次</strong>，比如 <code>router</code>、<code>api controller/cron job/message queue</code>、<code>service</code>、<code>dao/driver</code> 等等</li><li>对应需求和方案，从 <code>api controller/cron job/message queue</code> 来入手，<strong>巩固理解业务，了解实现细节</strong></li><li>遇到<strong>复杂且核心的代码</strong>，可画流程图等专门记录和分析</li></ol><h1 id="模拟开发"><a href="#模拟开发" class="headerlink" title="模拟开发"></a><strong>模拟开发</strong></h1><blockquote><p>模拟开发阶段主要是从实践层面来运行项目，<strong>过一遍工作的流程</strong>。</p></blockquote><h2 id="可用资产-3"><a href="#可用资产-3" class="headerlink" title="可用资产"></a>可用资产</h2><ol><li>项目代码</li><li>环境信息</li></ol><h2 id="阶段目标-3"><a href="#阶段目标-3" class="headerlink" title="阶段目标"></a>阶段目标</h2><ol><li>本地和远程可以<strong>跑通项目代码</strong></li><li><strong>熟悉完整的开发流程</strong>：编写文档 → 生成代码 → 业务开发 → 单元测试 → 代码规范 → 提交代码 → 代码评审 → 合入代码 → 代码打包 → 部署 → 测试</li></ol><h1 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a><strong>代码重构</strong></h1><blockquote><p>代码重构阶段主要是从理想层面来优化项目，<strong>提升自己和新项目</strong>。</p></blockquote><h2 id="可用资产-4"><a href="#可用资产-4" class="headerlink" title="可用资产"></a>可用资产</h2><ol><li>项目代码</li></ol><h2 id="阶段目标-4"><a href="#阶段目标-4" class="headerlink" title="阶段目标"></a>阶段目标</h2><ol><li><strong>学习或改进</strong>项目代码，大到架构模式，小到算法结构，同时也要关注代码规范</li></ol><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a><strong>致谢</strong></h1><blockquote><p>感谢晓清哥成为我的伯乐，让我有机会在喜欢的地方做喜欢的事情，在工作中和生活上也给了我很多鼓励；感谢风哥在我回来之后依然让我觉得对这里很有归属感，风哥也会一直是我的榜样（in every aspect；感谢远哥，亦师亦友，为全世界坠好的 mentor 打 call；感谢各位不嫌弃我菜的同事，有你们在，有风哥选的 Macbook Pro，有智神送的 Windows，每天到了工位都觉得这一刻一定要为 HK0700 卖命（bushi。</p><p>上一次分别时，其实自己感到蛮有压力，一方面担心要被炒鱿鱼了（现在也，另一方面是因为有偶像包袱（xs开始给自己加戏。<strong>但是无论如何地说，我最应该做的就是——好好工作</strong>。在热爱的事业里实现价值（我最好是，同时也希望大家因为我的存在而感到开心（一丢丢也行，btw愿下一次没有分别 :)</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;夸张的修辞手法.jpg（（（ Happy 7*24 Day 🤟&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Others" scheme="http://yoursite.com/categories/Others/"/>
    
    
  </entry>
  
  <entry>
    <title>#Shell Script# 思维导图：Shell Script</title>
    <link href="http://yoursite.com/2021/07/21/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BShell%20Script/"/>
    <id>http://yoursite.com/2021/07/21/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BShell%20Script/</id>
    <published>2021-07-20T23:00:21.000Z</published>
    <updated>2021-07-22T15:07:46.708Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Shell Script</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Shell_Script.png" alt="Shell Script Mindmap"></p><p><img src="/images/flag.png" alt="测试标志图示"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="http://cn.linux.vbird.org/linux_basic/0340bashshell-scripts.php" target="_blank" rel="noopener">学习 shell scripts</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Shell Script&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>#Bash# 思维导图：Bash 命令行</title>
    <link href="http://yoursite.com/2021/07/20/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BBash/"/>
    <id>http://yoursite.com/2021/07/20/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BBash/</id>
    <published>2021-07-19T23:00:21.000Z</published>
    <updated>2021-07-22T15:07:42.622Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Bash</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Bash.png" alt="Bash Mindmap"></p><p><img src="/images/cfg.gif" alt="配置文件读取图示"></p><p><img src="/images/var.jpg" alt="变量配置方式图示"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="http://cn.linux.vbird.org/linux_basic/0320bash.php" target="_blank" rel="noopener">认识与学习 BASH</a></li><li><a href="http://cn.linux.vbird.org/linux_basic/0330regularex.php" target="_blank" rel="noopener">正规表示法与文件格式化处理</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Bash&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>#Vim# 思维导图：Vim 编辑器</title>
    <link href="http://yoursite.com/2021/07/19/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BVim/"/>
    <id>http://yoursite.com/2021/07/19/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BVim/</id>
    <published>2021-07-18T23:00:21.000Z</published>
    <updated>2021-07-22T15:07:31.558Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Vim</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Vim.png" alt="Vim Mindmap"></p><p><img src="/images/vi-mode.gif" alt="模式图示"></p><p><img src="/images/vim-commands.jpg" alt="命令图示"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="http://cn.linux.vbird.org/linux_basic/0310vi.php" target="_blank" rel="noopener">vim程序编辑器</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Vim&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>#Kubernetes# QCloud上的Kubernetes初体验</title>
    <link href="http://yoursite.com/2021/06/20/QCloud%E4%B8%8A%E7%9A%84Kubernetes%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2021/06/20/QCloud%E4%B8%8A%E7%9A%84Kubernetes%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-06-19T23:00:21.000Z</published>
    <updated>2021-06-25T07:04:45.616Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>QCloud</strong>上利用<strong>Kubernetes</strong>编排应用与服务，主要分为以下<strong>四个部分</strong>：</p><ul><li><strong>环境准备 Environment</strong></li><li><strong>疑难解决 FAQ</strong></li><li>具体案例 Cases</li><li>参考文献 References</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="环境准备-Environment"><a href="#环境准备-Environment" class="headerlink" title="环境准备 Environment"></a><strong>环境准备 Environment</strong></h2><h3 id="更新系统源和软件包"><a href="#更新系统源和软件包" class="headerlink" title="更新系统源和软件包"></a>更新系统源和软件包</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get upgrade</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure><h3 id="修改Docker配置"><a href="#修改Docker配置" class="headerlink" title="修改Docker配置"></a>修改Docker配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 编辑docker配置</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"exe-opts"</span>: [<span class="hljs-string">"native.cgroupdriver=systemd"</span>], <span class="hljs-comment"># 修改cgroup driver选项，使docker和k8s一致</span></span><br><span class="line">  <span class="hljs-string">"registry-mirrors"</span>: [<span class="hljs-string">"https://registry.docker-cn.com"</span>] <span class="hljs-comment"># 替换成国内镜像源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启docker服务</span></span><br><span class="line">service docker restart 或 systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装Kubernetes工具"><a href="#安装Kubernetes工具" class="headerlink" title="安装Kubernetes工具"></a>安装Kubernetes工具</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 安装依赖工具</span></span><br><span class="line">apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 获取阿里云镜像源密钥</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main"</span> &gt; /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 安装k8s工具</span></span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><h3 id="下载Kubernetes镜像"><a href="#下载Kubernetes镜像" class="headerlink" title="下载Kubernetes镜像"></a>下载Kubernetes镜像</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看所需镜像列表</span></span><br><span class="line">kubeadm config images list</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 编辑下载镜像文件</span></span><br><span class="line">vim pull_k8s_images.sh</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 从国内镜像源中下载镜像并替换标签</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  `kubeadm config images list`;  <span class="hljs-keyword">do</span></span><br><span class="line">    imageName=<span class="hljs-variable">$&#123;i#k8s.gcr.io/&#125;</span></span><br><span class="line">    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$imageName</span> != <span class="hljs-string">"coredns/coredns:v1.8.0"</span> ]</span><br><span class="line">    <span class="hljs-keyword">then</span></span><br><span class="line">        docker pull registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker tag registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span> k8s.gcr.io/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker rmi registry.aliyuncs.com/google_containers/<span class="hljs-variable">$imageName</span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">        docker pull coredns/coredns:1.8.0</span><br><span class="line">        docker tag coredns/coredns:1.8.0 k8s.gcr.io/<span class="hljs-variable">$imageName</span></span><br><span class="line">        docker rmi coredns/coredns:1.8.0</span><br><span class="line">    <span class="hljs-keyword">fi</span></span><br><span class="line"><span class="hljs-keyword">done</span>;</span><br></pre></td></tr></table></figure><h3 id="初始化Kubernetes主节点"><a href="#初始化Kubernetes主节点" class="headerlink" title="初始化Kubernetes主节点"></a>初始化Kubernetes主节点</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16 <span class="hljs-comment"># 设置网络信息</span></span><br><span class="line">--ignore-preflight-errors=NumCPU <span class="hljs-comment"># 允许单核运行</span></span><br></pre></td></tr></table></figure><h3 id="应用Kubernetes配置"><a href="#应用Kubernetes配置" class="headerlink" title="应用Kubernetes配置"></a>应用Kubernetes配置</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><h3 id="下载Kubernetes网络插件"><a href="#下载Kubernetes网络插件" class="headerlink" title="下载Kubernetes网络插件"></a>下载Kubernetes网络插件</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="允许主节点部署"><a href="#允许主节点部署" class="headerlink" title="允许主节点部署"></a>允许主节点部署</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="允许命令行补全"><a href="#允许命令行补全" class="headerlink" title="允许命令行补全"></a>允许命令行补全</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install bash-completion</span><br><span class="line"><span class="hljs-built_in">echo</span> <span class="hljs-string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="查看是否部署成功"><a href="#查看是否部署成功" class="headerlink" title="查看是否部署成功"></a>查看是否部署成功</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure><h2 id="疑难解决-FAQ"><a href="#疑难解决-FAQ" class="headerlink" title="疑难解决 FAQ"></a><strong>疑难解决 FAQ</strong></h2><h3 id="Docker重启服务出现异常"><a href="#Docker重启服务出现异常" class="headerlink" title="Docker重启服务出现异常"></a>Docker重启服务出现异常</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看日志定位原因</span></span><br><span class="line">service docker status 或 systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 是因为/var/run/docker.sock出错了</span></span><br><span class="line">level=fatal msg=<span class="hljs-string">"can't create unix socket /var/run/docker.sock: is a directory"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 删除/var/run/docker.sock文件</span></span><br><span class="line">rm -rf /var/run/docker.sock</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启docker服务</span></span><br><span class="line">service docker restart 或 systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Kubernetes忘记加入集群命令"><a href="#Kubernetes忘记加入集群命令" class="headerlink" title="Kubernetes忘记加入集群命令"></a>Kubernetes忘记加入集群命令</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 提示的命令</span></span><br><span class="line">kubeadm join <span class="hljs-variable">$&#123;ip&#125;</span> --token <span class="hljs-variable">$&#123;token&#125;</span> --discovery-token-ca-cert-hash <span class="hljs-variable">$&#123;discovery-token-ca-cert-hash&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 找回的命令</span></span><br><span class="line">kubeadm token create --<span class="hljs-built_in">print</span>-join-command</span><br></pre></td></tr></table></figure><h3 id="x509-certificate-signed-by-unknown-authority"><a href="#x509-certificate-signed-by-unknown-authority" class="headerlink" title="x509: certificate signed by unknown authority"></a>x509: certificate signed by unknown authority</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 重装后.kube/config变化了，重新应用配置</span></span><br><span class="line">mkdir -p <span class="hljs-variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config</span><br><span class="line"><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><h3 id="Docker容器连接本机MySQL-Redis"><a href="#Docker容器连接本机MySQL-Redis" class="headerlink" title="Docker容器连接本机MySQL/Redis"></a>Docker容器连接本机MySQL/Redis</h3><h4 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 查看docker容器网络模式</span></span><br><span class="line">docker inspect <span class="hljs-variable">$&#123;container_id&#125;</span> | grep -i <span class="hljs-string">"network"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 默认为bridge的模式</span></span><br><span class="line"><span class="hljs-string">"NetworkMode"</span>: <span class="hljs-string">"bridge"</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 此时localhost仅仅指的是容器自身地址，应使用主机的内网地址</span></span><br></pre></td></tr></table></figure><h4 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 以host的模式启动docker容器</span></span><br><span class="line">docker run -d --network=host <span class="hljs-variable">$&#123;registry&#125;</span>:<span class="hljs-variable">$&#123;tag&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 此时localhost同时代表了容器和主机的地址</span></span><br></pre></td></tr></table></figure><h3 id="Xshell外网远程访问MySQL-Redis"><a href="#Xshell外网远程访问MySQL-Redis" class="headerlink" title="Xshell外网远程访问MySQL/Redis"></a>Xshell外网远程访问MySQL/Redis</h3><h4 id="修改-MySQL-Redis-配置"><a href="#修改-MySQL-Redis-配置" class="headerlink" title="修改 MySQL/Redis 配置"></a>修改 MySQL/Redis 配置</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 编辑mysql配置</span></span><br><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 监听所有网段</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="hljs-built_in">bind</span>-address=0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 修改远程登录权限</span></span><br><span class="line">mysql -u root -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user <span class="hljs-built_in">set</span> host=<span class="hljs-string">'%'</span> <span class="hljs-built_in">where</span> user=<span class="hljs-string">'root'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启mysql服务使其重新生效</span></span><br><span class="line">mysqld --defaults-file=/etc/mysql/my.cnf</span><br><span class="line">service mysql restart 或 systemctl restart mysql</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 编辑redis配置</span></span><br><span class="line">vim /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 监听所有网段</span></span><br><span class="line"><span class="hljs-built_in">bind</span> 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 重启redis-server服务使其重新生效</span></span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line">service redis-server restart 或 systemctl restart redis-server</span><br></pre></td></tr></table></figure><h4 id="修改腾讯云服务器安全组规则"><a href="#修改腾讯云服务器安全组规则" class="headerlink" title="修改腾讯云服务器安全组规则"></a>修改腾讯云服务器安全组规则</h4><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># 允许所有网段访问3306和6379这两个端口</span></span><br><span class="line">0.0.0.0/0 TCP:3306,6379 Allow <span class="hljs-comment"># ipv4放行</span></span><br><span class="line">::/0 TCP:3306,6379 Allow <span class="hljs-comment"># ipv6放行</span></span><br></pre></td></tr></table></figure><h2 id="具体案例-Cases"><a href="#具体案例-Cases" class="headerlink" title="具体案例 Cases"></a><strong>具体案例 Cases</strong></h2><h3 id="交叉编译与镜像构建"><a href="#交叉编译与镜像构建" class="headerlink" title="交叉编译与镜像构建"></a>交叉编译与镜像构建</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># set go env</span></span><br><span class="line"><span class="hljs-built_in">export</span> GO111MODULE=auto</span><br><span class="line"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io,direct</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># build binary executable</span></span><br><span class="line">mkdir -p ./bin</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o ./bin/giotto_gateway_core</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># Dockerfile</span></span><br><span class="line">FROM golang</span><br><span class="line">MAINTAINER LotteWong &lt;lottewong21@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /go/src/app</span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line">CMD ./bin/giotto_gateway_core -config ./configs/prod/</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># docker build</span></span><br><span class="line">commit=`git rev-parse --short HEAD`</span><br><span class="line">docker build -f ./ci/docker/Dockerfile -t giotto-gateway-core:<span class="hljs-variable">$commit</span> .</span><br></pre></td></tr></table></figure><h3 id="容器部署与容器编排"><a href="#容器部署与容器编排" class="headerlink" title="容器部署与容器编排"></a>容器部署与容器编排</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># deploy config</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: giotto-gateway-core</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      name: giotto-gateway-core</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: giotto-gateway-core</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: giotto-gateway-core</span><br><span class="line">          image: giotto-gateway-core:d1785da</span><br><span class="line">          imagePullPolicy: Never</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">---</span><br><span class="line"><span class="hljs-comment"># service config</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: giotto-gateway-core</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 80</span><br><span class="line">      name: <span class="hljs-string">"http-proxy"</span></span><br><span class="line">      targetPort: 80</span><br><span class="line">      protocol: TCP</span><br><span class="line">      nodePort: 30080</span><br><span class="line">    - port: 443</span><br><span class="line">      name: <span class="hljs-string">"https-proxy"</span></span><br><span class="line">      targetPort: 443</span><br><span class="line">      protocol: TCP</span><br><span class="line">      nodePort: 30443</span><br><span class="line">  <span class="hljs-built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    name: giotto-gateway-core</span><br><span class="line">    </span><br><span class="line"><span class="hljs-comment"># kubectl create</span></span><br><span class="line">kubectl create -f ./ci/k8s/core.yaml</span><br></pre></td></tr></table></figure><h2 id="参考资料-References"><a href="#参考资料-References" class="headerlink" title="参考资料 References"></a><strong>参考资料 References</strong></h2><ol><li><a href="https://cloud.tencent.com/developer/article/1817826" target="_blank" rel="noopener">在 Ubuntu 上安装 K8S 教程</a></li><li><a href="https://my.oschina.net/u/4409146/blog/3306898" target="_blank" rel="noopener">ubuntu k8s 单节点快速安装</a></li><li><a href="https://blog.csdn.net/u012891504/article/details/52857682" target="_blank" rel="noopener">docker服务启动失败</a></li><li><a href="https://blog.csdn.net/weixin_44130081/article/details/103563392" target="_blank" rel="noopener">K8S在kubeadm init以后查询kubeadm join</a></li><li><a href="https://stackoverflow.com/questions/36939381/x509-certificate-signed-by-unknown-authority-kubernetes" target="_blank" rel="noopener">x509 certificate signed by unknown authority- Kubernetes</a></li><li><a href="https://blog.csdn.net/suchahaerkang/article/details/84570488" target="_blank" rel="noopener">Docker的四种网络模式Bridge模式</a></li><li><a href="https://cloud.tencent.com/developer/article/1153843" target="_blank" rel="noopener">mysql 远程连接数据库的二种方法</a></li><li><a href="https://blog.csdn.net/Light_Breeze/article/details/82070222" target="_blank" rel="noopener">解决mysql不用密码也能登录</a></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;strong&gt;QCloud&lt;/strong&gt;上利用&lt;strong&gt;Kubernetes&lt;/strong&gt;编排应用与服务，主要分为以下&lt;strong&gt;四个部分&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境准备 Environment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;疑难解决 FAQ&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;具体案例 Cases&lt;/li&gt;
&lt;li&gt;参考文献 References&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="DevOps" scheme="http://yoursite.com/categories/DevOps/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(6) 系统测试</title>
    <link href="http://yoursite.com/2021/06/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(6)/"/>
    <id>http://yoursite.com/2021/06/05/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(6)/</id>
    <published>2021-06-04T23:00:21.000Z</published>
    <updated>2021-06-21T03:11:42.222Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>系统测试</strong>，分为<strong>两个</strong>方面：</p><ul><li>功能测试</li><li>性能测试</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a><strong>功能测试</strong></h2><h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><ul><li><a href="https://segmentfault.com/a/1190000012127784" target="_blank" rel="noopener">常见测试用例设计方法</a></li></ul><h3 id="用例记录"><a href="#用例记录" class="headerlink" title="用例记录"></a>用例记录</h3><table><thead><tr><th align="center">条目</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">用例编号</td><td align="center"><code>[数学]</code></td></tr><tr><td align="center">功能描述</td><td align="center"><code>[-]</code></td></tr><tr><td align="center">前置条件</td><td align="center"><code>[-]</code></td></tr><tr><td align="center">测试过程</td><td align="center"><code>[-]</code></td></tr><tr><td align="center">预期结果</td><td align="center"><code>[-]</code></td></tr><tr><td align="center">是否通过</td><td align="center"><code>[是否]</code></td></tr></tbody></table><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a><strong>性能测试</strong></h2><h3 id="测试环境及工具"><a href="#测试环境及工具" class="headerlink" title="测试环境及工具"></a>测试环境及工具</h3><table><thead><tr><th align="center">条目</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">硬件机器配置</td><td align="center">腾讯云服务器1C2G1M</td></tr><tr><td align="center">测试网络环境</td><td align="center">localhost</td></tr><tr><td align="center">软件压测工具</td><td align="center">wrk</td></tr></tbody></table><p><img src="/images/wrk.png" alt="压测工具wrk使用方法"></p><h3 id="测试过程及结果"><a href="#测试过程及结果" class="headerlink" title="测试过程及结果"></a>测试过程及结果</h3><table><thead><tr><th align="center">压测对象</th><th align="center">压测命令</th><th align="center">每秒的请求量</th></tr></thead><tbody><tr><td align="center">微服务API网关核心模块</td><td align="center"><code>wrk -t30 -c600 -d30s -H&quot;Authorization:Bearer ${jwt}&quot; http://localhost:8080/wrk</code></td><td align="center">5651.29</td></tr><tr><td align="center">纯 <code>Golang</code> 服务器</td><td align="center"><code>wrk -t30 -c600 -d30s http://localhost:8081/wrk</code></td><td align="center">25961.68</td></tr><tr><td align="center"><code>Nginx</code></td><td align="center"><code>wrk -t30 -c600 -d30s http://localhost:8082/wrk</code></td><td align="center">3561.78</td></tr></tbody></table><ul><li>开启<strong>30个线程</strong>，并发请求<strong>600次后台接口</strong>，持续<strong>30秒时间</strong>，采集并打印压测结果。</li><li>从<strong>每秒的请求量</strong>看，<strong>纯 <code>Golang</code> 服务器</strong>没有中间流程损耗和额外组件开销因而支撑的 <code>QPS</code> 大幅领先，<strong>微服务API网关核心模块</strong>能够超过未调优前的 <strong><code>Nginx</code></strong> 的性能表现。</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;系统测试&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能测试&lt;/li&gt;
&lt;li&gt;性能测试&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(5) 容器部署</title>
    <link href="http://yoursite.com/2021/06/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(5)/"/>
    <id>http://yoursite.com/2021/06/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(5)/</id>
    <published>2021-06-03T23:00:21.000Z</published>
    <updated>2021-06-20T14:10:45.635Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>容器部署</strong>，分为<strong>三个</strong>方面：</p><ul><li><code>Golang</code> 交叉编译</li><li><code>Docker</code> 镜像构建</li><li><code>Kubernetes</code> 容器编排</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="Golang交叉编译"><a href="#Golang交叉编译" class="headerlink" title="Golang交叉编译"></a><strong>Golang交叉编译</strong></h2><ul><li><u><code>Golang</code> 支持交叉编译，即在当前的操作系统和体系架构上生成指定的操作系统和体系架构的可执行程序。</u>微服务API网关预先采取 <code>Golang</code> 交叉编译出于两点考虑：一是提前在开发环境中编译程序比之后在镜像构建中编译程序的<strong>速度要更加快</strong>；二是开发环境和部署环境的操作系统不同，可执行的二进制文件必须经过交叉编译<strong>才能正常运行</strong>。</li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/docker/cross_compile.sh</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># set go env</span></span><br><span class="line"><span class="hljs-built_in">export</span> GO111MODULE=auto</span><br><span class="line"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io,direct</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># build binary executable</span></span><br><span class="line">mkdir -p ./bin</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o ./bin/giotto_gateway_core</span><br></pre></td></tr></table></figure><ul><li>先设置 <code>Golang</code> 打开 <code>Go Module</code> 模式并下载程序的模块依赖，再定义目标的操作系统和体系架构开始交叉编译。</li></ul><h2 id="Docker镜像构建"><a href="#Docker镜像构建" class="headerlink" title="Docker镜像构建"></a><strong>Docker镜像构建</strong></h2><ul><li><u><code>Docker</code> 是一个通过管理 <code>Linux</code> 容器来实现应用环境隔离的开源容器引擎，它提供了一整套完备且易用的容器管理接口。</u>微服务API网关的管理模块和核心模块两个微服务将使用 <code>Docker</code> 构建镜像，实现<strong>更快的程序部署和更低的计算开销</strong>。</li></ul><figure class="highlight dockerfile hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/docker/Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">FROM</span> golang</span><br><span class="line"><span class="hljs-keyword">MAINTAINER</span> LotteWong &lt;lottewong21@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">WORKDIR</span><span class="hljs-bash"> /go/src/app</span></span><br><span class="line"><span class="hljs-keyword">COPY</span><span class="hljs-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">CMD</span><span class="hljs-bash"> ./bin/giotto_gateway_core -config ./configs/prod/</span></span><br></pre></td></tr></table></figure><ul><li>先拉取基础镜像 <code>golang</code>，再定义容器内的工作目录为 <code>/go/src/app</code>，接着将主机的源文件拷贝进容器中，最后命令行启动微服务。</li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/docker/cross_compile.sh</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># build docker images</span></span><br><span class="line">commit=`git rev-parse --short HEAD`</span><br><span class="line">docker build -f ./ci/docker/Dockerfile -t giotto-gateway-core:<span class="hljs-variable">$commit</span> .</span><br></pre></td></tr></table></figure><ul><li>先读取 <code>Git</code> 版本管理库中最新的 <code>commit id</code> 作为镜像的 <code>tag</code>，以便更好地标识和管理镜像，再使用 <code>docker build</code> 命令，传入参数构建镜像。</li></ul><h2 id="Kubernetes容器编排"><a href="#Kubernetes容器编排" class="headerlink" title="Kubernetes容器编排"></a><strong>Kubernetes容器编排</strong></h2><ul><li><u><code>Kubernetes</code> 是具备良好的自动化部署、扩展、调度和编排能力的开源容器管理平台，能够帮助有效地降低容器运维成本，提高服务集群管理效率。</u>微服务API网关的管理模块和核心模块两个微服务将使用 <code>Kubernetes</code> 部署和编排容器，以提高系统的<strong>扩展性和可靠性</strong>。</li></ul><p><img src="/images/microservice_api_gateway_k8s.png" alt="微服务API网关基于Kubernetes的部署图"></p><ul><li>对于<u>核心模块</u>而言，1个核心模块 <code>Pod</code> 管理1个核心模块 <code>Container</code> 的<strong>生命周期</strong>，总共部署3个 <code>Pod</code> 实现核心模块功能的<strong>高可用</strong>；对于<u>管理模块</u>而言，1个管理模块 <code>Pod</code> 管理1个管理模块 <code>Container</code> 的<strong>生命周期</strong>，由于到达管理模块的流量相对较小，总共部署1个 <code>Pod</code> <strong>提供服务</strong>。创建 <code>Deployment</code> 用于对 <code>Pod</code> 进行<strong>弹性伸缩和负载均衡</strong>，创建 <code>Service</code> 用于对 <code>Pod</code> 进行端口映射以<strong>实现外部网络的访问</strong>。</li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/k8s/core.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># deploy config</span></span><br><span class="line"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span></span><br><span class="line"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span></span><br><span class="line"><span class="hljs-attr">metadata:</span></span><br><span class="line">  <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br><span class="line"><span class="hljs-attr">spec:</span></span><br><span class="line">  <span class="hljs-attr">replicas:</span> <span class="hljs-number">3</span></span><br><span class="line">  <span class="hljs-attr">selector:</span></span><br><span class="line">    <span class="hljs-attr">matchLabels:</span></span><br><span class="line">      <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br><span class="line">  <span class="hljs-attr">template:</span></span><br><span class="line">    <span class="hljs-attr">metadata:</span></span><br><span class="line">      <span class="hljs-attr">labels:</span></span><br><span class="line">        <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br><span class="line">    <span class="hljs-attr">spec:</span></span><br><span class="line">      <span class="hljs-attr">containers:</span></span><br><span class="line">        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br><span class="line">          <span class="hljs-attr">image:</span> <span class="hljs-string">giotto-gateway-core:d1785da</span></span><br><span class="line">          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Never</span></span><br><span class="line">          <span class="hljs-attr">ports:</span></span><br><span class="line">            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span></span><br><span class="line">            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span></span><br></pre></td></tr></table></figure><ul><li><code>Kubernetes Deployment</code> 配置定义了 <code>Pod</code> 的副本数量、元数据、容器镜像和容器端口映射关系等，用于对微服务容器进行部署运行、弹性伸缩和负载均衡。</li></ul><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/k8s/core.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># service config</span></span><br><span class="line"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span></span><br><span class="line"><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span></span><br><span class="line"><span class="hljs-attr">metadata:</span></span><br><span class="line">  <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br><span class="line"><span class="hljs-attr">spec:</span></span><br><span class="line">  <span class="hljs-attr">ports:</span></span><br><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">80</span></span><br><span class="line">      <span class="hljs-attr">name:</span> <span class="hljs-string">"http-proxy"</span></span><br><span class="line">      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span></span><br><span class="line">      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span></span><br><span class="line">      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30080</span></span><br><span class="line">    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">443</span></span><br><span class="line">      <span class="hljs-attr">name:</span> <span class="hljs-string">"https-proxy"</span></span><br><span class="line">      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span></span><br><span class="line">      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span></span><br><span class="line">      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30443</span></span><br><span class="line">  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span></span><br><span class="line">  <span class="hljs-attr">selector:</span></span><br><span class="line">    <span class="hljs-attr">name:</span> <span class="hljs-string">giotto-gateway-core</span></span><br></pre></td></tr></table></figure><ul><li><code>Kubernetes Service</code> 配置定义了元数据和对外端口映射关系等，用于建立外部网络访问 <code>Kubernetes</code> 节点内容器的通信桥梁。</li></ul><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># take giotto-gateway-core as an example</span></span><br><span class="line"><span class="hljs-comment"># https://github.com/LotteWong/giotto-gateway-core/blob/main/ci/k8s/apply_yaml.sh</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># k8s apply yaml to create deploy and service</span></span><br><span class="line">kubectl create -f ./ci/k8s/core.yaml</span><br></pre></td></tr></table></figure><ul><li>使用 <code>kubectl create</code> 命令，传入配置文件路径创建 <code>Deployment</code> 和 <code>Service</code>。</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;容器部署&lt;/strong&gt;，分为&lt;strong&gt;三个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Golang&lt;/code&gt; 交叉编译&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;/code&gt; 镜像构建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Kubernetes&lt;/code&gt; 容器编排&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
    <category term="Kubernetes" scheme="http://yoursite.com/tags/Kubernetes/"/>
    
    <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(4) 数据库设计</title>
    <link href="http://yoursite.com/2021/06/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(4)/"/>
    <id>http://yoursite.com/2021/06/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(4)/</id>
    <published>2021-06-03T13:00:07.000Z</published>
    <updated>2021-08-12T15:40:06.836Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>数据库设计</strong>，分为<strong>两个</strong>方面：</p><ul><li><code>MySQL</code> 数据库表设计 - <strong>E-R图及关系模式</strong></li><li><code>Redis</code> 键值设计</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h2><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ul><li>1NF是对属性的<strong>原子性</strong>，要求<strong>属性不可再分解</strong>。</li><li>2NF是对记录的<strong>唯一性</strong>，要求记录有唯一标识，即<strong>不存在部分依赖</strong>。</li><li>3NF是对字段的<strong>冗余性</strong>，要求任何字段不能由其他字段中派生出来，即<strong>不存在传递依赖</strong>。</li></ul><h3 id="绘制E-R图例"><a href="#绘制E-R图例" class="headerlink" title="绘制E-R图例"></a>绘制E-R图例</h3><ol><li>确定所有的实体（矩形框）</li><li>确定实体的联系（连线）</li><li>确定实体和联系的属性（椭圆框）</li><li>确定实体的键（下划线）</li></ol><h3 id="转换关系模式"><a href="#转换关系模式" class="headerlink" title="转换关系模式"></a>转换关系模式</h3><table><thead><tr><th align="center">类型</th><th align="center">映射方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">一元联系</td><td align="center">直接映射</td><td align="center">实体的属性→关系模式的属性；实体的主键→关系模式的主键</td></tr><tr><td align="center">二元联系 - 一对一</td><td align="center">合并关系模式</td><td align="center">合成一个关系模式 <strong>R</strong>；任一实体的全部主键→关系模式的主键</td></tr><tr><td align="center">二元联系 - 一对多</td><td align="center">引入外键</td><td align="center">一方实体的主键→多方实体的外键；联系的属性→多方实体的属性</td></tr><tr><td align="center">二元联系 - 多对多</td><td align="center">增加关系模式</td><td align="center">增加一个关系模式 <strong>R</strong>；两个实体的主键并集→关系模式的主键；联系的属性→关系模式的属性</td></tr><tr><td align="center">超类子类</td><td align="center">分化关系模式</td><td align="center">分化两个关系模式 <strong>R1 和 R2</strong>；R1是父关系模式，包括R1主键和R1非主键；R2是子关系模式，包括R1主键和R2非主键；若概括是全部的，不用创建父关系模式，子关系模式包括所有</td></tr><tr><td align="center">复合属性</td><td align="center">由子属性代替</td><td align="center">复合属性 A → 多个子属性代替 A1, A2, A3, …</td></tr><tr><td align="center">多值属性</td><td align="center">拆分关系模式</td><td align="center">拆成两个关系模式 <strong>R1 和 R2</strong>；R1包括R的主键和M的本身；R2包括R的主键和除多值属性外的属性；注意设置级联操作</td></tr></tbody></table><h2 id="MySQL-数据库表设计"><a href="#MySQL-数据库表设计" class="headerlink" title="MySQL 数据库表设计"></a><strong>MySQL 数据库表设计</strong></h2><h3 id="用户的数据库表设计"><a href="#用户的数据库表设计" class="headerlink" title="用户的数据库表设计"></a>用户的数据库表设计</h3><p><img src="/images/user_er.png" alt="用户的E-R图"></p><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><ul><li><u>用户实体</u>拥有<strong>用户ID、用户名称、加密密码和加密盐值</strong>四种属性，其中出于安全性的考虑，密码需要经过盐值加密后存储在数据库而非直接明文存储。</li></ul><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><ul><li>没有联系可以分析。</li></ul><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><ul><li>对用户的E-R图进行一元联系类型转换，得出关系模式：<strong>用户实体的属性为独立的一张表</strong>。</li></ul><h3 id="服务的数据库表设计"><a href="#服务的数据库表设计" class="headerlink" title="服务的数据库表设计"></a>服务的数据库表设计</h3><p><img src="/images/service_er.png" alt="服务的E-R图"></p><h4 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h4><ul><li><u>服务实体</u>拥有<strong>服务ID、服务名称、服务描述和协议类型</strong>四种属性，其中协议类型是多值属性，用于扩展和适配接入不同协议的服务，目前可支持 <code>HTTP</code>、<code>HTTPS</code> 和 <code>WebSocket</code> 协议。</li><li><u>协议接入与请求重写配置实体</u>固定具有<strong>地址和重写规则</strong>属性，从协议接入与请求重写配置中可以泛化出各种类型的协议配置，不同协议的配置内容不尽相同。</li><li><u>权限认证配置实体</u>包含<strong>ip黑白名单</strong>的属性，用于鉴别请求来源。</li><li><u>流量控制配置实体</u>是相对服务而言的，具有<strong>限流间隔和限流次数</strong>属性，可以支持周期灵活的限流策略。</li><li><u>负载均衡配置实体</u>有三大属性，分别为<strong>ip列表、weight列表和算法类型</strong>，其中算法类型是多值属性，标识了负载均衡使用的算法，目前支持随机负载均衡、轮询负载均衡、加权轮询负载均衡和一致性哈希负载均衡四种算法。</li></ul><h4 id="联系-1"><a href="#联系-1" class="headerlink" title="联系"></a>联系</h4><ul><li>服务实体与协议接入与请求重写配置实体、权限认证配置实体、流量控制配置实体、负载均衡配置实体和反向代理配置实体的关系都是<strong>一对一的拥有关系</strong>。特别地，协议接入配置实体存在<strong>泛化</strong>，可以衍生出不同类型的协议接入与请求重写配置。</li></ul><h4 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h4><ul><li>对服务的E-R图进行二元联系类型转换，得出关系模式：<strong>服务实体与权限认证配置实体、流量控制配置实体、负载均衡配置实体和反向代理配置实体合并为一张数据库表，为了考虑后续对其他协议进行扩展，故每种协议配置都建议新建一张数据库表</strong>。</li></ul><h3 id="应用的数据库表设计"><a href="#应用的数据库表设计" class="headerlink" title="应用的数据库表设计"></a>应用的数据库表设计</h3><p><img src="/images/app_er.png" alt="应用的E-R图"></p><h4 id="实体-2"><a href="#实体-2" class="headerlink" title="实体"></a>实体</h4><ul><li><u>应用实体</u>拥有<strong>应用ID、应用标识、应用名称和应用密钥</strong>四种属性，其中出于安全性的考虑密钥应该存储加密后的密文而非明文。</li><li><u>权限认证配置实体</u>包含<strong>ip黑白名单</strong>的属性，用于鉴别请求来源。</li><li><u>流量控制配置实体</u>是相对应用而言的，具有<strong>QPD（每日请求量）限制和QPS（每秒请求量）限制</strong>两种属性。</li></ul><h4 id="联系-2"><a href="#联系-2" class="headerlink" title="联系"></a>联系</h4><ul><li>应用实体与权限控制配置实体和流量控制配置实体的关系都是<strong>一对一的拥有关系</strong>。</li></ul><h4 id="转换-2"><a href="#转换-2" class="headerlink" title="转换"></a>转换</h4><ul><li>对应用的E-R图进行二元联系类型转换，得出关系模式：<strong>服务实体与权限认证配置实体和流量控制配置实体合并为一张数据库表</strong>。</li></ul><h2 id="Redis-键值设计"><a href="#Redis-键值设计" class="headerlink" title="Redis 键值设计"></a><strong>Redis 键值设计</strong></h2><h3 id="会话的键值设计"><a href="#会话的键值设计" class="headerlink" title="会话的键值设计"></a>会话的键值设计</h3><table><thead><tr><th align="center">键</th><th align="center">值类型</th><th align="center">值内容</th></tr></thead><tbody><tr><td align="center">session_<code>{session_id}</code></td><td align="center">Binary</td><td align="center">会话信息</td></tr></tbody></table><h3 id="配置的键值设计"><a href="#配置的键值设计" class="headerlink" title="配置的键值设计"></a>配置的键值设计</h3><table><thead><tr><th align="center">键</th><th align="center">值类型</th><th align="center">值内容</th></tr></thead><tbody><tr><td align="center">app_<code>{app_id}</code></td><td align="center">String</td><td align="center">app po as json</td></tr><tr><td align="center">service_<code>{service_id}</code></td><td align="center">String</td><td align="center">service po as json</td></tr><tr><td align="center">lb_<code>{lb_id}</code></td><td align="center">String</td><td align="center">load balance po as json</td></tr><tr><td align="center">ac_<code>{ac_id}</code></td><td align="center">String</td><td align="center">access control po as json</td></tr></tbody></table><h3 id="计数器的键值设计"><a href="#计数器的键值设计" class="headerlink" title="计数器的键值设计"></a>计数器的键值设计</h3><table><thead><tr><th align="center">键</th><th align="center">值类型</th><th align="center">值内容</th></tr></thead><tbody><tr><td align="center">flow_day_count_<code>{day_format}</code>_flow_total_count</td><td align="center">String</td><td align="center">总计每一天的流量统计数</td></tr><tr><td align="center">flow_hour_count_<code>{hour_format}</code>_flow_total_count</td><td align="center">String</td><td align="center">总计每小时的流量统计数</td></tr><tr><td align="center">flow_day_count_<code>{day_format}</code>_flow_service_count_<code>{service_name}</code></td><td align="center">String</td><td align="center">单个服务每一天的流量统计数</td></tr><tr><td align="center">flow_hour_count_<code>{hour_format}</code>_flow_service_count_<code>{service_name}</code></td><td align="center">String</td><td align="center">单个服务每小时的流量统计数</td></tr><tr><td align="center">flow_day_count_<code>{day_format}</code>_flow_app_count_<code>{app_id}</code></td><td align="center">String</td><td align="center">单个应用每一天的流量统计数</td></tr><tr><td align="center">flow_hour_count_<code>{hour_format}</code>_flow_app_count_<code>{app_id}</code></td><td align="center">String</td><td align="center">单个应用每小时的流量统计数</td></tr></tbody></table><h3 id="限流器的键值设计"><a href="#限流器的键值设计" class="headerlink" title="限流器的键值设计"></a>限流器的键值设计</h3><table><thead><tr><th align="center">键</th><th align="center">值类型</th><th align="center">值内容</th></tr></thead><tbody><tr><td align="center">rate_flow_service_count_<code>{service_name}</code></td><td align="center">String</td><td align="center">单个服务调用结束的时间点</td></tr><tr><td align="center">rate_flow_app_count_<code>{app_id}</code></td><td align="center">String</td><td align="center">单个应用调用结束的时间点</td></tr></tbody></table><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a><strong>Refs</strong></h2><ul><li><a href="https://segmentfault.com/a/1190000013695030" target="_blank" rel="noopener">数据库逻辑设计之三大范式通俗理解</a></li><li><a href="https://zhuanlan.zhihu.com/p/29029129#:~:text=er%E5%9B%BE%E7%9A%84%E5%B1%9E%E6%80%A7%E8%BF%98,%E5%92%8C%E5%90%8D%E5%AD%97%E5%B1%9E%E6%80%A7%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%9A&text=%E6%B4%BE%E7%94%9F%E5%B1%9E%E6%80%A7(derivers%20attribute)%EF%BC%9A,%E5%AD%98%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%B1%9E%E6%80%A7%E3%80%82" target="_blank" rel="noopener">数据库ER图基础概念整理</a></li><li><a href="https://zhuanlan.zhihu.com/p/74394591" target="_blank" rel="noopener">如何画好ER图</a></li><li><a href="https://www.pianshen.com/article/1262363338/" target="_blank" rel="noopener">将E-R图转换成关系模式</a></li><li><a href="https://lanlan2017.github.io/ReadingNotes/ef76614/" target="_blank" rel="noopener">数据库设计过程</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;数据库设计&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MySQL&lt;/code&gt; 数据库表设计 - &lt;strong&gt;E-R图及关系模式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;/code&gt; 键值设计&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(3) 微服务设计</title>
    <link href="http://yoursite.com/2021/06/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(3)/"/>
    <id>http://yoursite.com/2021/06/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(3)/</id>
    <published>2021-06-02T23:00:21.000Z</published>
    <updated>2021-06-18T08:18:18.511Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>微服务设计</strong>，分为<strong>两个</strong>方面：</p><ul><li>微服务API网关管理模块设计 - <strong>时序图</strong></li><li>微服务API网关核心模块设计 - <strong>时序图</strong></li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a><strong>UML</strong></h2><ul><li><u>时序图</u>一般由<strong>角色、对象、生命线、控制焦点、消息和组合片段</strong>构成。</li></ul><h3 id="控制焦点"><a href="#控制焦点" class="headerlink" title="控制焦点"></a>控制焦点</h3><ul><li>控制焦点是时序图中表示时间段的符号，在此时间段内对象将执行相应的操作。</li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><table><thead><tr><th align="center">消息类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">同步消息</td><td align="center">发送者同步调用接收者，两者顺序工作</td></tr><tr><td align="center">异步消息</td><td align="center">发送者异步调用接收者，两者并发工作</td></tr><tr><td align="center">返回消息</td><td align="center">从调用中返回结果</td></tr><tr><td align="center">自联消息</td><td align="center">调用对象自身方法</td></tr></tbody></table><h3 id="组合片段"><a href="#组合片段" class="headerlink" title="组合片段"></a>组合片段</h3><table><thead><tr><th align="center">组合类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Alternative Fragment (alt)</td><td align="center">相当于 if-else</td></tr><tr><td align="center">Option Fragment (opt)</td><td align="center">相当于 switch-case</td></tr><tr><td align="center">Parallel Fragment (par)</td><td align="center">相当于 go</td></tr><tr><td align="center">Loop Fragment (loop)</td><td align="center">相当于 for</td></tr></tbody></table><h2 id="微服务API网关管理模块设计"><a href="#微服务API网关管理模块设计" class="headerlink" title="微服务API网关管理模块设计"></a><strong>微服务API网关管理模块设计</strong></h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><ul><li>下图是<u>微服务API网关管理模块的架构图</u>，微服务API网关管理模块的内部逻辑是典型的MVC模式，由 <strong><code>UI</code> 层、<code>Router</code> 层、<code>Controller</code> 层和 <code>Dao</code> 层</strong>组成。</li></ul><p><img src="/images/microservice_api_gateway_admin_arch.png" alt="微服务API网关管理模块架构图"></p><ol><li><strong><code>UI</code> 层</strong>即前端可视化的管理平台界面，前端代码被编译打包后，将静态托管于管理模块中。</li><li><strong><code>Router</code> 层</strong>对外暴露API接口，定义了API的请求方法和访问路径，编排了所应用的中间件的类型和顺序。</li><li><strong><code>Controller</code> 层</strong>是具体实现业务逻辑的层次，在该层次进行用户登录、用户登出、管理用户、管理服务、管理应用和数据统计功能的编写。</li><li><strong><code>Dao</code> 层</strong>作为数据库驱动层直接对接不同类型的数据库，管理模块支持对 <code>MySQL</code> 和 <code>Redis</code> 进行操作。</li><li><code>UI</code> 层和 <code>Router</code> 层之间主要传输 <strong><code>json</code></strong> 数据，统一了前后端的数据传输格式；<code>Router</code> 层和 <code>Controller</code> 层之间主要传输程序定义的 <strong><code>dto</code> (数据传输对象)</strong> 结构体；<code>Controller</code> 层和 <code>Dao</code> 层之间主要传输程序定义的 <strong><code>po</code> (持久化对象)</strong> 结构体。</li></ol><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><ul><li>下图是<u>微服务API网关管理模块的时序图</u>，来描述管理员用户如何通过管理模块进行登录登出和各项配置管理。</li></ul><p><img src="/images/microservice_api_gateway_admin_seq.png" alt="微服务API网关管理模块时序图"></p><ol><li><strong>第1步到第2步</strong>，管理员用户需要输入用户名称和用户密码登录，此时登录生成的会话信息将保存到 <code>Redis</code> ，以便保持一定时间内的登录状态。</li><li><strong>第3步到第5步</strong>，管理员用户添加、修改或删除配置，配置的变更将会分别存入到 <code>MySQL</code> 和 <code>Redis</code> 中。</li><li><strong>第6步到第12步</strong>，管理员用户查询配置，若缓存命中则直接从 <code>Redis</code> 中读取配置的缓存数据，若缓存未命中则会从 <code>MySQL</code> 中读取配置的数据库数据，并将配置回写到 <code>Redis</code> 缓存中，然后返回配置给管理员用户。</li><li><strong>第13步到第14步</strong>，当管理员用户登出时，管理模块将删除 <code>Redis</code> 中对应的会话信息，此后该管理员用户的登录状态不再保持，可以选择重新登录或者切换账户登录。</li></ol><h2 id="微服务API网关核心模块设计"><a href="#微服务API网关核心模块设计" class="headerlink" title="微服务API网关核心模块设计"></a><strong>微服务API网关核心模块设计</strong></h2><h3 id="架构图-1"><a href="#架构图-1" class="headerlink" title="架构图"></a>架构图</h3><ul><li>下图是<u>微服务API网关核心模块的架构图</u>，微服务API网关核心模块由多个中间件以洋葱模型的形式组织起来，并与 <code>Redis</code> 和 <code>Consul</code> 结合使用，为不同形态的客户端提供多协议的后台服务统一入口。</li></ul><p><img src="/images/microservice_api_gateway_core_arch.png" alt="微服务API网关核心模块架构图"></p><ol><li><code>App</code> 应用或 <code>Web</code> 应用发起请求，在核心模块中经过协议接入、权限认证、流量统计、流量控制、请求重写、负载均衡和反向代理中间件的处理，最终到达后台的 <code>HTTP</code> 服务、<code>HTTPS</code> 服务或 <code>WebSocket</code> 服务。</li><li>其中，后台的服务应预先配置好服务和应用的配置，方便核心模块的协议接入中间件和权限认证中间件读取服务和应用的配置进而处理后续的业务逻辑。同时，后台的服务也应先在 <code>Consul</code> 中注册服务名称和地址，方便核心模块的负载均衡中间件发现服务地址，根据权重列表设置和负载均衡算法合理分发流量，最后交由反向代理中间件去访问实际的后台服务。</li><li>特别地，在核心模块中应该保持对服务地址变化的监听，<code>Consul</code> 也有必要周期性对后台服务进行健康检查，保证服务的可用性。</li></ol><h3 id="时序图-1"><a href="#时序图-1" class="headerlink" title="时序图"></a>时序图</h3><ul><li>下图是<u>微服务API网关核心模块的时序图</u>，来说明应用如何通过核心模块进行公共逻辑处理和请求代理转发。</li></ul><p><img src="/images/microservice_api_gateway_core_seq.png" alt="微服务API网关核心模块时序图"></p><ol><li><strong>第1步</strong>，应用发起请求。</li><li><strong>第2步到第7步</strong>，核心模块先向 <code>Redis</code> 缓存查询服务配置进行协议接入，然后查询应用配置进行权限认证。</li><li><strong>第8步到第11步</strong>，进行流量统计和流量控制，并回写入 <code>Redis</code>。</li><li><strong>第12步</strong>，根据规则进行请求重写。</li><li><strong>第13步到第15步</strong>，根据服务发现获取的地址列表以及预先配置的权重列表应用指定的负载均衡算法选出访问地址。</li><li><strong>第16步到第18步</strong>，核心模块使用负载均衡地址反向代理访问后台服务，并将响应返回给应用。</li></ol><h2 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a><strong>FAQs</strong></h2><blockquote><p><strong>Q：</strong>并行和异步如何用时序图来表示？</p><p><strong>A：</strong>首先确定触发的时间点，接着判断是否并行，最后判断是否异步</p></blockquote><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a><strong>Refs</strong></h2><ul><li><a href="https://www.cnblogs.com/ywqu/archive/2009/12/22/1629426.html" target="_blank" rel="noopener">UML建模之时序图（Sequence Diagram）</a></li><li><a href="https://blog.csdn.net/craftsman1970/article/details/72629590" target="_blank" rel="noopener">序列图(Sequence Diagram)::并行区/临界区</a></li><li><a href="https://blog.csdn.net/craftsman1970/article/details/71136232" target="_blank" rel="noopener">序列图(Sequence Diagram)::同步/异步</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;微服务设计&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服务API网关管理模块设计 - &lt;strong&gt;时序图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;微服务API网关核心模块设计 - &lt;strong&gt;时序图&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(2) 整体设计</title>
    <link href="http://yoursite.com/2021/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(2)/"/>
    <id>http://yoursite.com/2021/06/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(2)/</id>
    <published>2021-06-01T23:00:21.000Z</published>
    <updated>2021-06-18T07:08:21.131Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>整体设计</strong>，分为<strong>两个</strong>方面：</p><ul><li>逻辑架构</li><li>调用关系</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a><strong>逻辑架构</strong></h2><ul><li>下图是<u>微服务API网关的整体逻辑架构图</u>，展示了微服务API网关的组成部分和逻辑功能。微服务API网关由<strong>管理模块</strong>和<strong>核心模块</strong>两个微服务提供主要功能，同时还依赖<strong>服务注册与服务发现中心</strong>提供服务的注册和发现，以及<strong>数据库层</strong>提供数据的缓存和持久化。</li></ul><p><img src="/images/microservice_api_gateway_arch.png" alt="微服务API网关逻辑架构图"></p><ol><li><strong>微服务API网关管理模块</strong>，内置了UI界面层提供可视化的管理平台，请求经由API接口层可以访问用户登录、用户登出、管理服务、管理应用、管理用户和数据统计等功能，实现一站式的网关配置管理。</li><li><strong>微服务API网关核心模块</strong>，由协议接入中间件识别请求和匹配配置，权限认证、请求重写、流量统计和流量控制中间件进行公共业务逻辑处理，负载均衡中间件从服务注册与服务发现中心发现可用服务列表并应用负载均衡算法找出合适的响应实例，反向代理根据负载均衡地址将请求转发至服务端服务并返回响应给客户端应用。</li><li><strong>服务注册与服务发现中心</strong>，技术选型为开箱即用的 <code>Consul</code>，主要提供服务注册和服务发现的功能。对服务端服务而言，提供服务注册的统一存储位置，保存服务的名称、地址、端口和标签等元数据信息，还可以对已注册的服务进行自定义的周期性健康检查。对于微服务API网关而言，负载均衡中间件可以根据服务名发现可用的服务实例地址，并动态监听这些地址的可用情况和状态变化，及时更新负载均衡的地址列表。</li><li><strong>数据库层</strong>，包括 <code>MySQL</code> 关系型数据库和 <code>Redis</code> 非关系型数据库。<code>MySQL</code> 用于持久化用户、服务和应用的信息，是业务数据存放的位置和缓存数据同步的来源。<code>Redis</code> 用作缓存和计数器，加快微服务API网关处理客户端应用请求的速度，实现系统流量的统计和监控，并根据策略控制流量的进出。</li></ol><h2 id="调用关系"><a href="#调用关系" class="headerlink" title="调用关系"></a><strong>调用关系</strong></h2><ul><li>下图是<u>微服务API网关的整体调用关系图</u>，展示了微服务API网关各模块及其依赖作为一个整体如何与客户端和服务端进行交互的过程。其中<strong>客户端</strong>由管理员用户、<code>Web/App</code> 应用组成，<strong>微服务API网关</strong>由管理模块、核心模块、<code>MySQL</code>、<code>Redis</code> 和 <code>Consul</code> 组成，<strong>服务端</strong>由微服务组成。</li></ul><p><img src="/images/microservice_api_gateway_call.png" alt="微服务API网关调用关系图"></p><ol><li><strong>第1步</strong>，服务端的微服务先在服务注册与服务发现中心 <code>Consul</code> 中注册该微服务的名称和地址。</li><li><strong>第2步</strong>，客户端的管理员用户在管理模块中配置服务和应用。</li><li><strong>第3步</strong>，配置成功写入 <code>MySQL</code> 关系型数据库和 <code>Redis</code> 非关系型数据库中。</li><li><strong>第4步</strong>，客户端的 <code>Web</code> 应用或 <code>App</code> 应用即可通过核心模块请求服务端的微服务。</li><li><strong>第5步</strong>，核心模块在 <code>Redis</code> 缓存中读取服务和应用的配置。</li><li><strong>第6步</strong>，核心模块在服务注册与服务发现中心 <code>Consul</code> 中获取可用的地址列表。</li><li><strong>第7步</strong>，经过核心模块的一系列公共业务逻辑中间件处理后，请求被反向代理到已注册的微服务，服务端的微服务接收到请求并处理后返回响应给核心模块，核心模块再返回响应给客户端的应用。</li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;整体设计&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑架构&lt;/li&gt;
&lt;li&gt;调用关系&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 微服务API网关的设计与实现(1) 需求分析</title>
    <link href="http://yoursite.com/2021/06/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/"/>
    <id>http://yoursite.com/2021/06/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1API%E7%BD%91%E5%85%B3%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0(1)/</id>
    <published>2021-05-31T23:00:21.000Z</published>
    <updated>2021-06-20T12:45:09.180Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<u>微服务API网关</u>的<strong>需求分析</strong>，分为<strong>两个</strong>方面：</p><ul><li>功能性需求分析 - <strong>用例图和用例表</strong></li><li>非功能性需求分析</li></ul><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><hr><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a><strong>UML</strong></h2><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h3><ul><li><u>用例图</u>一般由<strong>参与者、用例、系统边界和关系</strong>构成。</li></ul><table><thead><tr><th align="center">关系类型</th><th>元素</th><th align="center">说明</th><th align="center">条件性</th><th align="center">直接性</th><th align="center">箭头指向</th></tr></thead><tbody><tr><td align="center">关联</td><td>参与者与用例之间的关系</td><td align="center">参与者和用例通信</td><td align="center">-</td><td align="center">-</td><td align="center">发送方指向接受方</td></tr><tr><td align="center">泛化</td><td>参与者之间或用例之间的关系</td><td align="center">子元素继承父元素</td><td align="center">无</td><td align="center">直接</td><td align="center">子元素指向父元素</td></tr><tr><td align="center">包含</td><td>用例之间的关系</td><td align="center">复杂用例拆成简单用例</td><td align="center">无</td><td align="center">间接</td><td align="center">复杂用例指向简单用例</td></tr><tr><td align="center">扩展</td><td>用例之间的关系</td><td align="center">基础用例增加附加用例</td><td align="center">有</td><td align="center">直接</td><td align="center">基础用例指向附加用例</td></tr></tbody></table><h3 id="用例表"><a href="#用例表" class="headerlink" title="用例表"></a>用例表</h3><ul><li><u>用例表</u>一般由<strong>用例编号、用例名称、参与者、用例描述、前置条件、后置条件、正常流程和异常流程</strong>构成。</li></ul><table><thead><tr><th align="center">条目</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">用例编号</td><td align="center"><code>[数字]</code></td></tr><tr><td align="center">用例名称</td><td align="center"><code>[动宾结构]</code></td></tr><tr><td align="center">参与者</td><td align="center"><code>[主语]</code></td></tr><tr><td align="center">用例描述</td><td align="center"><code>[相互独立；可以观测]</code></td></tr><tr><td align="center">前置条件</td><td align="center"><code>[分点说明]</code></td></tr><tr><td align="center">后置条件</td><td align="center"><code>[分点说明]</code></td></tr><tr><td align="center">正常流程</td><td align="center"><code>[正常操作→正常结果]</code></td></tr><tr><td align="center">异常流程</td><td align="center"><code>[异常操作→异常结果]</code></td></tr></tbody></table><h2 id="功能性需求分析"><a href="#功能性需求分析" class="headerlink" title="功能性需求分析"></a><strong>功能性需求分析</strong></h2><h3 id="微服务API网关管理模块用例"><a href="#微服务API网关管理模块用例" class="headerlink" title="微服务API网关管理模块用例"></a>微服务API网关管理模块用例</h3><ul><li>下图为<u>微服务API网关管理模块的用例图</u>，其展示了在管理模块中，管理员用户作为参与者与用例之间的关系以及主用例和子用例之间的关系。根据分析，管理模块共有6个主要的用例，分别为<strong>用户登录、用户登出、管理用户、管理服务、管理应用和数据统计</strong>。</li></ul><p><img src="/images/admin_use_case.png" alt="微服务API网关管理模块用例图"></p><h3 id="微服务API网关核心模块用例"><a href="#微服务API网关核心模块用例" class="headerlink" title="微服务API网关核心模块用例"></a>微服务API网关核心模块用例</h3><ul><li>下图为<u>微服务API网关核心模块的用例图</u>，其展示了在核心模块中，普通用户作为参与者与用例之间的关系以及主用例和子用例之间的关系。根据分析，核心模块共有7个主要的用例，分别为<strong>协议接入、权限认证、流量统计、流量控制、请求重写、负载均衡和反向代理</strong>。</li></ul><p><img src="/images/core_use_case.png" alt="微服务API网关核心模块用例图"></p><h2 id="非功能性需求分析"><a href="#非功能性需求分析" class="headerlink" title="非功能性需求分析"></a><strong>非功能性需求分析</strong></h2><hr><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li><strong>对于用户操作而言</strong>：应用口令安全要求和会话超时机制</li><li><strong>对于请求访问而言</strong>：设置 <code>JWT</code> 校验和 <code>IP</code> 校验</li><li><strong>对于数据传输而言</strong>：启动 <code>HTTPS</code> 监听</li><li><strong>对于数据保存而言</strong>：敏感信息使用盐值加密并以密文方式入库</li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ul><li>选用性能表现优秀、功能支持齐全的框架 <code>Gin</code></li><li>先访问缓存 <code>Redis</code> 代替直接访问数据库 <code>MySQL</code></li></ul><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><ul><li><strong>故障时仍稳定服务</strong>：进行多实例部署，周期探活并故障重启</li><li><strong>容易横向扩展实例</strong>：弹性伸缩&amp;&amp;负载均衡</li></ul><h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ul><li>统一的 <code>RESTful API</code> 接口</li><li>直观的 <code>Vue-Element-Admin</code> 界面 </li></ul><h2 id="FAQs"><a href="#FAQs" class="headerlink" title="FAQs"></a><strong>FAQs</strong></h2><blockquote><p><strong>Q：</strong>如何控制用例的粒度呢？</p><p><strong>A：</strong>参考<a href="https://www.cnblogs.com/HeroBeast/archive/2009/09/27/1575094.html" target="_blank" rel="noopener">用例的类型与粒度</a></p></blockquote><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a><strong>Refs</strong></h2><ul><li><a href="https://www.cnblogs.com/Yogurshine/archive/2013/01/14/2859248.html" target="_blank" rel="noopener">UML系列-用例图</a></li><li><a href="https://www.jianshu.com/p/7ff70e28bb72" target="_blank" rel="noopener">谈谈需求的描述-用例</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要介绍&lt;u&gt;微服务API网关&lt;/u&gt;的&lt;strong&gt;需求分析&lt;/strong&gt;，分为&lt;strong&gt;两个&lt;/strong&gt;方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功能性需求分析 - &lt;strong&gt;用例图和用例表&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;非功能性需求分析&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>#Grpc# 思维导图：Grpc Rpc Framework</title>
    <link href="http://yoursite.com/2021/05/04/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGrpc/"/>
    <id>http://yoursite.com/2021/05/04/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGrpc/</id>
    <published>2021-05-03T23:00:21.000Z</published>
    <updated>2021-07-25T15:09:11.684Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Grpc</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Grpc.png" alt="Grpc Mindmap"></p><p><img src="/images/grpc_rest_gateway.png" alt="网关结构图示"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="http://www.topgoer.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/gRPC/" target="_blank" rel="noopener">gRPC</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Grpc&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Grpc" scheme="http://yoursite.com/tags/Grpc/"/>
    
  </entry>
  
  <entry>
    <title>#Go-Micro# 思维导图：Go-Micro Microservice Framework</title>
    <link href="http://yoursite.com/2021/05/03/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGo-Micro/"/>
    <id>http://yoursite.com/2021/05/03/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGo-Micro/</id>
    <published>2021-05-02T23:00:21.000Z</published>
    <updated>2021-07-25T15:02:48.858Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Go-Micro</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Go-Micro.png" alt="Go-Micro Mindmap"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="https://learnku.com/docs/go-micro/1.x" target="_blank" rel="noopener">Go Micro 中文文档</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Go-Micro&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Go-Micro" scheme="http://yoursite.com/tags/Go-Micro/"/>
    
  </entry>
  
  <entry>
    <title>#Gorm# 思维导图：Gorm Object Relational Mapping Library</title>
    <link href="http://yoursite.com/2021/05/02/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGorm/"/>
    <id>http://yoursite.com/2021/05/02/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGorm/</id>
    <published>2021-05-01T23:00:21.000Z</published>
    <updated>2021-06-25T07:03:20.368Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Gorm</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Gorm.png" alt="Gorm Mindmap"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="https://learnku.com/docs/gorm/v2" target="_blank" rel="noopener">Gorm 中文文档</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Gorm&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Gin" scheme="http://yoursite.com/tags/Gin/"/>
    
  </entry>
  
  <entry>
    <title>#Gin# 思维导图：Gin Web Framework</title>
    <link href="http://yoursite.com/2021/05/01/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGin/"/>
    <id>http://yoursite.com/2021/05/01/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B9%8BGin/</id>
    <published>2021-04-30T23:00:21.000Z</published>
    <updated>2021-06-25T06:53:21.881Z</updated>
    
    <content type="html"><![CDATA[<p>备份记录 <code>Gin</code> 的<strong>思维导图</strong>和<strong>相关文档</strong>。</p><hr><a id="more"></a><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a><strong>思维导图</strong></h1><p><img src="/images/Gin.png" alt="Gin Mindmap"></p><h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a><strong>相关文档</strong></h1><ul><li><a href="https://learnku.com/docs/gin-gonic/2019" target="_blank" rel="noopener">Gin 框架中文文档</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;备份记录 &lt;code&gt;Gin&lt;/code&gt; 的&lt;strong&gt;思维导图&lt;/strong&gt;和&lt;strong&gt;相关文档&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Mind Map" scheme="http://yoursite.com/categories/Mind-Map/"/>
    
    
    <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
    <category term="Gin" scheme="http://yoursite.com/tags/Gin/"/>
    
  </entry>
  
  <entry>
    <title>#Microservice# 阅读《恒丰银行分布式核心系统 - API 网关 技术原型落地实践》笔记</title>
    <link href="http://yoursite.com/2021/04/07/%E6%81%92%E4%B8%B0%E9%93%B6%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F%20-%20API%20%E7%BD%91%E5%85%B3%E6%8A%80%E6%9C%AF%E5%8E%9F%E5%9E%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2021/04/07/%E6%81%92%E4%B8%B0%E9%93%B6%E8%A1%8C%E5%88%86%E5%B8%83%E5%BC%8F%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F%20-%20API%20%E7%BD%91%E5%85%B3%E6%8A%80%E6%9C%AF%E5%8E%9F%E5%9E%8B%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-04-06T23:00:21.000Z</published>
    <updated>2021-04-23T08:10:23.669Z</updated>
    
    <content type="html"><![CDATA[<p><em>赵毅,张涛.恒丰银行分布式核心系统-API网关技术原型落地实践[J].中国金融电脑,2017(04):48-55.</em></p><hr><a id="more"></a><h1 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 Table of Contents"></a><strong>目录 Table of Contents</strong></h1><!-- toc --><p><img src="/images/paper_xmind_5.png" alt="paper mindmap"></p><p>阅读本论文后，<strong>主要讨论以下两点</strong>：</p><ol><li>恒丰银行 API 网关技术架构</li><li>恒丰银行 API 网关设计亮点</li></ol><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a><strong>技术架构</strong></h2><p><img src="/images/paper_arch_5.png" alt="paper overall architecture"></p><p><img src="/images/paper_arch_6.png" alt="paper internal architecture"></p><ul><li><strong>Java SPI</strong>：实际是“基于接口的编程＋策略模式＋配置文件”的动态加载机制。</li><li><strong>Filter-PRPE</strong>：模型为 “PRE -&gt; ROUTING -&gt; POST -&gt; ERROR” 的责任链机制。</li></ul><p><img src="/images/config_data_structure.png" alt="config data structure design"></p><ul><li><strong>File System</strong>：提供了网关启动所需的环境配置信息，包括注册中心连接和参数配置、外部依赖连接和参数配置以及默认的基础规则配置。其中默认的基础规则配置可被动态地替换。</li><li><strong>Zookeeper</strong>：在提供服务注册与服务发现的能力之余，对配置进行持久化和订阅通知。</li></ul><blockquote><p><em>注：Zookeeper 替代了传统的数据库直接存储配置（MySQL 和 MongoDB 不再是必需的），Zookeeper 自带的消息订阅功能也解决了热更新问题（Redis 和 RabbitMQ 不再是必需的），为了提高运行效率数据将缓存在内存，这些都是非常具有参考价值的做法。同时，本文也提出了动态覆盖本地设置的新思路。</em></p></blockquote><h2 id="设计亮点"><a href="#设计亮点" class="headerlink" title="设计亮点"></a><strong>设计亮点</strong></h2><h3 id="多维度动态路由机制"><a href="#多维度动态路由机制" class="headerlink" title="多维度动态路由机制"></a>多维度动态路由机制</h3><p><img src="/images/route_rule_model.png" alt="route rule model"></p><p><img src="/images/multi-dimension_route_mechanism.png" alt="multi-dimension route mechanism"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><blockquote><p>本文提出了一种基于 Java SPI + Filter PRPE 实现的微服务 API 网关的<strong>架构</strong>，在服务/配置数据动态管理和多维度动态路由机制这两个方面为毕设工作提供了宝贵的参考。</p></blockquote><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;赵毅,张涛.恒丰银行分布式核心系统-API网关技术原型落地实践[J].中国金融电脑,2017(04):48-55.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="Microservice" scheme="http://yoursite.com/categories/Microservice/"/>
    
    
    <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
</feed>
